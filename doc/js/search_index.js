var search_data = {"index":{"searchIndex":["projects","api","api","bugsapi","documentsapi","eventsapi","foldersapi","forumsapi","milestonesapi","portalapi","projectsapi","tasklistsapi","tasksapi","timesheetsapi","usersapi","model","activity","bug","buglog","category","comment","document","event","folder","forum","generallog","log","milestone","owner","participant","portal","project","status","task","tasklist","tasklog","timelog","timeloglist","user","version","parser","bugparser","documentparser","eventparser","folderparser","forumparser","milestonesparser","portalparser","projectparser","taskparser","tasklistparser","timesheetparser","userparser","pexception","projectsexception","service","zohoprojects","util","zohohttpclient","add()","add()","add()","addbuglog()","addcategory()","addcomment()","addfolder()","addgenerallog()","addprojectstatus()","addtasklog()","create()","create()","create()","create()","createproject()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","deletebuglog()","deletefolder()","deletegenerallog()","deleteproject()","deletetasklog()","get()","get()","get()","get()","get()","get()","getampm()","getactivities()","getactivityby()","getactivityfor()","getactivityurl()","getaddedby()","getaddedperson()","getassigneeid()","getassigneename()","getassociatedocumentids()","getassociateforumids()","getbaseurl()","getbillstatus()","getbug()","getbugid()","getbugurl()","getbuglog()","getbuglogs()","getbugs()","getbugs()","getbugsapi()","getcategories()","getcategories()","getcategory()","getcategoryid()","getclassificationid()","getclassificationtype()","getclosedbugcount()","getclosedmilestonecount()","getclosedtaskcount()","getcode()","getcode()","getcomment()","getcomments()","getcomments()","getcomments()","getcompanyname()","getcontent()","getcontent()","getcontent()","getcontenttype()","getcountry()","getcreatedby()","getcreateddate()","getcreateddateformat()","getcreateddatelong()","getcreatedperson()","getcreatedtime()","getcreatedtime()","getcreatedtime()","getcreatedtimeformat()","getcreatedtimeformat()","getcreatedtimeformat()","getcreatedtimelong()","getcreatedtimelong()","getcreatedtimelong()","getdate()","getdateformat()","getdatelong()","getdescription()","getdescription()","getdescription()","getdescription()","getdisplayformat()","getdisplaytime()","getdocument()","getdocumenturl()","getdocuments()","getdocuments()","getdocumentsapi()","getduedate()","getduedateformat()","getduedatelong()","getduration()","getdurationhours()","getdurationminutes()","getemail()","getenddate()","getenddate()","getenddateformat()","getenddateformat()","getenddatelong()","getenddatelong()","getevent()","geteventurl()","getevents()","getevents()","geteventsapi()","getfilesize()","getfilename()","getflag()","getflag()","getflag()","getfolder()","getfolder()","getfolderid()","getfolderurl()","getfolders()","getfolders()","getfoldersapi()","getforum()","getforumurl()","getforums()","getforums()","getforumsapi()","getgenerallog()","getgenerallogs()","getgmttimezone()","getgrandtotal()","getheader()","gethour()","gethours()","gethoursdisplay()","gethttpuri()","getid()","getid()","getid()","getid()","getid()","getid()","getid()","getid()","getid()","getid()","getid()","getid()","getid()","getid()","getid()","getid()","getid()","getid()","getkey()","getlanguage()","getlocation()","getlogdate()","getlogdateformat()","getlogdatelong()","getmessage()","getmilestone()","getmilestone()","getmilestoneid()","getmilestoneurl()","getmilestones()","getmilestones()","getmilestonesapi()","getminutes()","getminutes()","getmoduleid()","getmodulename()","getname()","getname()","getname()","getname()","getname()","getname()","getname()","getname()","getname()","getname()","getname()","getname()","getnotes()","getnotify()","getnotify()","getoccurred()","getoccurrences()","getopenbugcount()","getopenmilestonecount()","getopentaskcount()","getownerid()","getownerid()","getownerid()","getownername()","getownername()","getownername()","getowners()","getparticipantid()","getparticipantperson()","getparticipants()","getpercentcomplete()","getportal()","getportals()","getportals()","getportalsapi()","getpostdate()","getpostdate()","getpostdateformat()","getpostdateformat()","getpostdatelong()","getpostdatelong()","getpostedby()","getpostedby()","getpostedby()","getpostedperson()","getpostedperson()","getpostedperson()","getpostedtime()","getpostedtimeformat()","getpostedtimelong()","getpriority()","getproject()","getprojectactivities()","getprojectid()","getprojectid()","getprojectname()","getprojectstatuses()","getprojecturl()","getprojecturl()","getprojects()","getprojects()","getprojectsapi()","getprojectsurl()","getquerymap()","getreminder()","getrepeat()","getreportedperson()","getreporterid()","getreproducibleid()","getreproducibletype()","getresult()","getresult()","getresult()","getresult()","getresult()","getresult()","getresult()","getresult()","getresult()","getresult()","getresult()","getrole()","getrole()","getrole()","getscheduledon()","getscheduledonlong()","getsequence()","getseverityid()","getseveritytype()","getstartdate()","getstartdate()","getstartdateformat()","getstartdateformat()","getstartdatelong()","getstartdatelong()","getstate()","getstatus()","getstatus()","getstatus()","getstatus()","getstatusid()","getstatustype()","getstatusurl()","getstatusurl()","getstatuses()","getsubtasks()","gettags()","gettask()","gettaskid()","gettaskname()","gettaskurl()","gettaskurl()","gettasklist()","gettasklist()","gettasklisttasks()","gettasklisturl()","gettasklists()","gettasklists()","gettasklistsapi()","gettasklog()","gettasklogs()","gettasks()","gettasks()","gettasksapi()","gettilte()","gettime()","gettimelogs()","gettimelogs()","gettimelong()","gettimezone()","gettimesheeturl()","gettimesheeturl()","gettimesheeturl()","gettimesheetsapi()","gettitle()","gettitle()","gettotalhours()","gettotalminutes()","geturl()","geturl()","geturl()","geturl()","geturl()","geturl()","geturl()","geturl()","geturl()","getupdatedby()","getuploaddoc()","getuploadedby()","getuploadeddate()","getuploadeddateformat()","getuploadeddatelong()","getuploadedon()","getuploadfile()","geturl()","getuserurl()","getusers()","getusers()","getusersapi()","getversion()","getversions()","getwebsiteurl()","isclosed()","iscompleted()","iscompleted()","isdefault()","isrolled()","jsontoactivity()","jsontobug()","jsontobuglog()","jsontocategory()","jsontocomment()","jsontocomment()","jsontodocument()","jsontoevent()","jsontofolder()","jsontofolder()","jsontoforum()","jsontogenerallog()","jsontomilestone()","jsontoowner()","jsontoparticipant()","jsontoproject()","jsontostatus()","jsontotask()","jsontotasklist()","jsontotasklist()","jsontotasklog()","jsontotimeloglist()","jsontouser()","jsontoversion()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","post()","setampm()","setactivityby()","setactivityfor()","setactivityurl()","setaddedby()","setaddedperson()","setassigneeid()","setassigneename()","setassociatedocumentids()","setassociateforumids()","setbillstatus()","setbugid()","setbugurl()","setbuglogs()","setcategoryid()","setclassificationid()","setclassificationtype()","setclosed()","setclosedbugcount()","setclosedmilestonecount()","setclosedtaskcount()","setcode()","setcomments()","setcompanyname()","setcompleted()","setcompleted()","setcontent()","setcontent()","setcontent()","setcontenttype()","setcountry()","setcreatedby()","setcreateddate()","setcreateddateformat()","setcreateddatelong()","setcreatedperson()","setcreatedtime()","setcreatedtime()","setcreatedtime()","setcreatedtimeformat()","setcreatedtimeformat()","setcreatedtimeformat()","setcreatedtimelong()","setcreatedtimelong()","setcreatedtimelong()","setdate()","setdateformat()","setdatelong()","setdefault()","setdescription()","setdescription()","setdescription()","setdescription()","setdisplayformat()","setdisplaytime()","setdocumenturl()","setduedate()","setduedateformat()","setduedatelong()","setduration()","setdurationhours()","setdurationminutes()","setemail()","setenddate()","setenddate()","setenddateformat()","setenddateformat()","setenddatelong()","setenddatelong()","seteventurl()","setfilesize()","setfilename()","setflag()","setflag()","setflag()","setfolder()","setfolderid()","setfolderurl()","setforumurl()","setgenerallogs()","setgmttimezone()","setgrandtotal()","sethour()","sethours()","sethoursdisplay()","setid()","setid()","setid()","setid()","setid()","setid()","setid()","setid()","setid()","setid()","setid()","setid()","setid()","setid()","setid()","setid()","setid()","setid()","setisannouncementpost()","setisdicussion()","setisopen()","setisstickypost()","setkey()","setlanguage()","setlocation()","setlogdate()","setlogdateformat()","setlogdatelong()","setmilestone()","setmilestoneid()","setmilestoneurl()","setminutes()","setminutes()","setmoduleid()","setmodulename()","setname()","setname()","setname()","setname()","setname()","setname()","setname()","setname()","setname()","setname()","setname()","setname()","setnotes()","setnotify()","setnotify()","setoccurred()","setoccurrences()","setopenbugcount()","setopenmilestonecount()","setopentaskcount()","setownerid()","setownerid()","setownerid()","setownername()","setownername()","setownername()","setowners()","setparticipantid()","setparticipantperson()","setparticipants()","setpercentcomplete()","setpostdate()","setpostdate()","setpostdateformat()","setpostdateformat()","setpostdatelong()","setpostdatelong()","setpostedby()","setpostedby()","setpostedby()","setpostedperson()","setpostedperson()","setpostedperson()","setpostedtime()","setpostedtimeformat()","setpostedtimelong()","setpriority()","setprojectid()","setprojectid()","setprojectname()","setprojecturl()","setreminder()","setrepeat()","setreportedperson()","setreporterid()","setreproducibleid()","setreproducibletype()","setrole()","setrole()","setrole()","setrolled()","setscheduledon()","setscheduledonlong()","setsequence()","setseverityid()","setseveritytype()","setstartdate()","setstartdate()","setstartdateformat()","setstartdateformat()","setstartdatelong()","setstartdatelong()","setstate()","setstatus()","setstatus()","setstatus()","setstatusid()","setstatustype()","setstatusurl()","setstatusurl()","setsubtasks()","settags()","settaskid()","settaskname()","settaskurl()","settaskurl()","settasklist()","settasklisturl()","settasklogs()","settime()","settimelong()","settimezone()","settimesheeturl()","settimesheeturl()","settimesheeturl()","settitle()","settitle()","settitle()","settotalhours()","settotalminutes()","seturl()","seturl()","seturl()","seturl()","seturl()","seturl()","seturl()","seturl()","seturl()","setupdatedby()","setuploaddoc()","setuploadedby()","setuploadeddate()","setuploadeddateformat()","setuploadeddatelong()","setuploadedon()","setuploadfile()","setuserurl()","setversion()","setversions()","setwebsiteurl()","throwsexception()","toparammap()","toparammap()","toparammap()","toparammap()","toparammap()","toparammap()","toparammap()","toparammap()","toparammap()","toparammap()","toparammap()","toparammap()","toparammap()","update()","update()","update()","update()","update()","update()","update()","updatebuglog()","updatefolder()","updategenerallog()","updateproject()","updatestatus()","updatetasklog()"],"longSearchIndex":["projects","projects::api","projects::api::api","projects::api::bugsapi","projects::api::documentsapi","projects::api::eventsapi","projects::api::foldersapi","projects::api::forumsapi","projects::api::milestonesapi","projects::api::portalapi","projects::api::projectsapi","projects::api::tasklistsapi","projects::api::tasksapi","projects::api::timesheetsapi","projects::api::usersapi","projects::model","projects::model::activity","projects::model::bug","projects::model::buglog","projects::model::category","projects::model::comment","projects::model::document","projects::model::event","projects::model::folder","projects::model::forum","projects::model::generallog","projects::model::log","projects::model::milestone","projects::model::owner","projects::model::participant","projects::model::portal","projects::model::project","projects::model::status","projects::model::task","projects::model::tasklist","projects::model::tasklog","projects::model::timelog","projects::model::timeloglist","projects::model::user","projects::model::version","projects::parser","projects::parser::bugparser","projects::parser::documentparser","projects::parser::eventparser","projects::parser::folderparser","projects::parser::forumparser","projects::parser::milestonesparser","projects::parser::portalparser","projects::parser::projectparser","projects::parser::taskparser","projects::parser::tasklistparser","projects::parser::timesheetparser","projects::parser::userparser","projects::pexception","projects::pexception::projectsexception","projects::service","projects::service::zohoprojects","projects::util","projects::util::zohohttpclient","projects::api::documentsapi#add()","projects::api::eventsapi#add()","projects::api::forumsapi#add()","projects::api::timesheetsapi#addbuglog()","projects::api::forumsapi#addcategory()","projects::api::forumsapi#addcomment()","projects::api::foldersapi#addfolder()","projects::api::timesheetsapi#addgenerallog()","projects::api::projectsapi#addprojectstatus()","projects::api::timesheetsapi#addtasklog()","projects::api::bugsapi#create()","projects::api::milestonesapi#create()","projects::api::tasklistsapi#create()","projects::api::tasksapi#create()","projects::api::projectsapi#createproject()","projects::api::bugsapi#delete()","projects::api::documentsapi#delete()","projects::api::eventsapi#delete()","projects::api::forumsapi#delete()","projects::api::milestonesapi#delete()","projects::api::tasklistsapi#delete()","projects::api::tasksapi#delete()","projects::util::zohohttpclient::delete()","projects::api::timesheetsapi#deletebuglog()","projects::api::foldersapi#deletefolder()","projects::api::timesheetsapi#deletegenerallog()","projects::api::projectsapi#deleteproject()","projects::api::timesheetsapi#deletetasklog()","projects::api::bugsapi#get()","projects::api::documentsapi#get()","projects::api::milestonesapi#get()","projects::api::projectsapi#get()","projects::api::tasksapi#get()","projects::util::zohohttpclient::get()","projects::model::event#getampm()","projects::parser::projectparser#getactivities()","projects::model::activity#getactivityby()","projects::model::activity#getactivityfor()","projects::model::project#getactivityurl()","projects::model::comment#getaddedby()","projects::model::comment#getaddedperson()","projects::model::bug#getassigneeid()","projects::model::bug#getassigneename()","projects::model::task#getassociatedocumentids()","projects::model::task#getassociateforumids()","projects::api::api#getbaseurl()","projects::model::log#getbillstatus()","projects::parser::bugparser#getbug()","projects::model::buglog#getbugid()","projects::model::project#getbugurl()","projects::parser::timesheetparser#getbuglog()","projects::model::timelog#getbuglogs()","projects::api::bugsapi#getbugs()","projects::parser::bugparser#getbugs()","projects::service::zohoprojects#getbugsapi()","projects::api::forumsapi#getcategories()","projects::parser::forumparser#getcategories()","projects::parser::forumparser#getcategory()","projects::model::forum#getcategoryid()","projects::model::bug#getclassificationid()","projects::model::bug#getclassificationtype()","projects::model::project#getclosedbugcount()","projects::model::project#getclosedmilestonecount()","projects::model::project#getclosedtaskcount()","projects::model::portal#getcode()","projects::pexception::projectsexception#getcode()","projects::parser::forumparser#getcomment()","projects::api::forumsapi#getcomments()","projects::model::task#getcomments()","projects::parser::forumparser#getcomments()","projects::model::portal#getcompanyname()","projects::model::comment#getcontent()","projects::model::forum#getcontent()","projects::model::status#getcontent()","projects::model::document#getcontenttype()","projects::model::portal#getcountry()","projects::model::task#getcreatedby()","projects::model::project#getcreateddate()","projects::model::project#getcreateddateformat()","projects::model::project#getcreateddatelong()","projects::model::task#getcreatedperson()","projects::model::bug#getcreatedtime()","projects::model::comment#getcreatedtime()","projects::model::tasklist#getcreatedtime()","projects::model::bug#getcreatedtimeformat()","projects::model::comment#getcreatedtimeformat()","projects::model::tasklist#getcreatedtimeformat()","projects::model::bug#getcreatedtimelong()","projects::model::comment#getcreatedtimelong()","projects::model::tasklist#getcreatedtimelong()","projects::model::log#getdate()","projects::model::portal#getdateformat()","projects::model::timelog#getdatelong()","projects::model::bug#getdescription()","projects::model::document#getdescription()","projects::model::project#getdescription()","projects::model::version#getdescription()","projects::model::timelog#getdisplayformat()","projects::model::activity#getdisplaytime()","projects::parser::documentparser#getdocument()","projects::model::project#getdocumenturl()","projects::api::documentsapi#getdocuments()","projects::parser::documentparser#getdocuments()","projects::service::zohoprojects#getdocumentsapi()","projects::model::bug#getduedate()","projects::model::bug#getduedateformat()","projects::model::bug#getduedatelong()","projects::model::task#getduration()","projects::model::event#getdurationhours()","projects::model::event#getdurationminutes()","projects::model::user#getemail()","projects::model::milestone#getenddate()","projects::model::task#getenddate()","projects::model::milestone#getenddateformat()","projects::model::task#getenddateformat()","projects::model::milestone#getenddatelong()","projects::model::task#getenddatelong()","projects::parser::eventparser#getevent()","projects::model::project#geteventurl()","projects::api::eventsapi#getevents()","projects::parser::eventparser#getevents()","projects::service::zohoprojects#geteventsapi()","projects::model::version#getfilesize()","projects::model::document#getfilename()","projects::model::bug#getflag()","projects::model::milestone#getflag()","projects::model::tasklist#getflag()","projects::model::document#getfolder()","projects::parser::folderparser#getfolder()","projects::model::document#getfolderid()","projects::model::project#getfolderurl()","projects::api::foldersapi#getfolders()","projects::parser::folderparser#getfolders()","projects::service::zohoprojects#getfoldersapi()","projects::parser::forumparser#getforum()","projects::model::project#getforumurl()","projects::api::forumsapi#getforums()","projects::parser::forumparser#getforums()","projects::service::zohoprojects#getforumsapi()","projects::parser::timesheetparser#getgenerallog()","projects::model::timelog#getgenerallogs()","projects::model::portal#getgmttimezone()","projects::model::timeloglist#getgrandtotal()","projects::util::zohohttpclient::getheader()","projects::model::event#gethour()","projects::model::log#gethours()","projects::model::log#gethoursdisplay()","projects::util::zohohttpclient::gethttpuri()","projects::model::activity#getid()","projects::model::bug#getid()","projects::model::category#getid()","projects::model::comment#getid()","projects::model::document#getid()","projects::model::event#getid()","projects::model::folder#getid()","projects::model::forum#getid()","projects::model::log#getid()","projects::model::milestone#getid()","projects::model::owner#getid()","projects::model::portal#getid()","projects::model::project#getid()","projects::model::status#getid()","projects::model::task#getid()","projects::model::tasklist#getid()","projects::model::user#getid()","projects::model::version#getid()","projects::model::bug#getkey()","projects::model::portal#getlanguage()","projects::model::event#getlocation()","projects::model::log#getlogdate()","projects::model::log#getlogdateformat()","projects::model::log#getlogdatelong()","projects::pexception::projectsexception#getmessage()","projects::model::tasklist#getmilestone()","projects::parser::milestonesparser#getmilestone()","projects::model::bug#getmilestoneid()","projects::model::project#getmilestoneurl()","projects::api::milestonesapi#getmilestones()","projects::parser::milestonesparser#getmilestones()","projects::service::zohoprojects#getmilestonesapi()","projects::model::event#getminutes()","projects::model::log#getminutes()","projects::model::bug#getmoduleid()","projects::model::bug#getmodulename()","projects::model::activity#getname()","projects::model::category#getname()","projects::model::folder#getname()","projects::model::forum#getname()","projects::model::generallog#getname()","projects::model::milestone#getname()","projects::model::owner#getname()","projects::model::portal#getname()","projects::model::project#getname()","projects::model::task#getname()","projects::model::tasklist#getname()","projects::model::user#getname()","projects::model::log#getnotes()","projects::model::document#getnotify()","projects::model::forum#getnotify()","projects::model::event#getoccurred()","projects::model::event#getoccurrences()","projects::model::project#getopenbugcount()","projects::model::project#getopenmilestonecount()","projects::model::project#getopentaskcount()","projects::model::log#getownerid()","projects::model::milestone#getownerid()","projects::model::project#getownerid()","projects::model::log#getownername()","projects::model::milestone#getownername()","projects::model::project#getownername()","projects::model::task#getowners()","projects::model::participant#getparticipantid()","projects::model::participant#getparticipantperson()","projects::model::event#getparticipants()","projects::model::task#getpercentcomplete()","projects::parser::portalparser#getportal()","projects::api::portalapi#getportals()","projects::parser::portalparser#getportals()","projects::service::zohoprojects#getportalsapi()","projects::model::comment#getpostdate()","projects::model::forum#getpostdate()","projects::model::comment#getpostdateformat()","projects::model::forum#getpostdateformat()","projects::model::comment#getpostdatelong()","projects::model::forum#getpostdatelong()","projects::model::comment#getpostedby()","projects::model::forum#getpostedby()","projects::model::status#getpostedby()","projects::model::comment#getpostedperson()","projects::model::forum#getpostedperson()","projects::model::status#getpostedperson()","projects::model::status#getpostedtime()","projects::model::status#getpostedtimeformat()","projects::model::status#getpostedtimelong()","projects::model::task#getpriority()","projects::parser::projectparser#getproject()","projects::api::projectsapi#getprojectactivities()","projects::model::bug#getprojectid()","projects::model::log#getprojectid()","projects::model::log#getprojectname()","projects::api::projectsapi#getprojectstatuses()","projects::model::portal#getprojecturl()","projects::api::projectsapi#getprojecturl()","projects::api::projectsapi#getprojects()","projects::parser::projectparser#getprojects()","projects::service::zohoprojects#getprojectsapi()","projects::api::projectsapi#getprojectsurl()","projects::api::api#getquerymap()","projects::model::event#getreminder()","projects::model::event#getrepeat()","projects::model::bug#getreportedperson()","projects::model::bug#getreporterid()","projects::model::bug#getreproducibleid()","projects::model::bug#getreproducibletype()","projects::parser::bugparser#getresult()","projects::parser::documentparser#getresult()","projects::parser::eventparser#getresult()","projects::parser::folderparser#getresult()","projects::parser::forumparser#getresult()","projects::parser::milestonesparser#getresult()","projects::parser::projectparser#getresult()","projects::parser::taskparser#getresult()","projects::parser::tasklistparser#getresult()","projects::parser::timesheetparser#getresult()","projects::util::zohohttpclient::getresult()","projects::model::portal#getrole()","projects::model::timeloglist#getrole()","projects::model::user#getrole()","projects::model::event#getscheduledon()","projects::model::event#getscheduledonlong()","projects::model::tasklist#getsequence()","projects::model::bug#getseverityid()","projects::model::bug#getseveritytype()","projects::model::milestone#getstartdate()","projects::model::task#getstartdate()","projects::model::milestone#getstartdateformat()","projects::model::task#getstartdateformat()","projects::model::milestone#getstartdatelong()","projects::model::task#getstartdatelong()","projects::model::activity#getstate()","projects::model::milestone#getstatus()","projects::model::project#getstatus()","projects::model::tasklist#getstatus()","projects::parser::projectparser#getstatus()","projects::model::bug#getstatusid()","projects::model::bug#getstatustype()","projects::model::milestone#getstatusurl()","projects::model::project#getstatusurl()","projects::parser::projectparser#getstatuses()","projects::model::task#getsubtasks()","projects::model::document#gettags()","projects::parser::taskparser#gettask()","projects::model::tasklog#gettaskid()","projects::model::tasklog#gettaskname()","projects::model::project#gettaskurl()","projects::model::tasklist#gettaskurl()","projects::model::task#gettasklist()","projects::parser::tasklistparser#gettasklist()","projects::api::tasksapi#gettasklisttasks()","projects::model::project#gettasklisturl()","projects::api::tasklistsapi#gettasklists()","projects::parser::tasklistparser#gettasklists()","projects::service::zohoprojects#gettasklistsapi()","projects::parser::timesheetparser#gettasklog()","projects::model::timelog#gettasklogs()","projects::api::tasksapi#gettasks()","projects::parser::taskparser#gettasks()","projects::service::zohoprojects#gettasksapi()","projects::model::event#gettilte()","projects::model::activity#gettime()","projects::api::timesheetsapi#gettimelogs()","projects::parser::timesheetparser#gettimelogs()","projects::model::activity#gettimelong()","projects::model::portal#gettimezone()","projects::model::bug#gettimesheeturl()","projects::model::project#gettimesheeturl()","projects::model::task#gettimesheeturl()","projects::service::zohoprojects#gettimesheetsapi()","projects::model::bug#gettitle()","projects::model::buglog#gettitle()","projects::model::timelog#gettotalhours()","projects::model::log#gettotalminutes()","projects::model::bug#geturl()","projects::model::document#geturl()","projects::model::folder#geturl()","projects::model::forum#geturl()","projects::model::log#geturl()","projects::model::milestone#geturl()","projects::model::project#geturl()","projects::model::task#geturl()","projects::model::tasklist#geturl()","projects::model::comment#getupdatedby()","projects::model::document#getuploaddoc()","projects::model::version#getuploadedby()","projects::model::version#getuploadeddate()","projects::model::version#getuploadeddateformat()","projects::model::version#getuploadeddatelong()","projects::model::version#getuploadedon()","projects::model::forum#getuploadfile()","projects::util::zohohttpclient::geturl()","projects::model::project#getuserurl()","projects::api::usersapi#getusers()","projects::parser::userparser#getusers()","projects::service::zohoprojects#getusersapi()","projects::model::version#getversion()","projects::model::document#getversions()","projects::model::portal#getwebsiteurl()","projects::model::bug#isclosed()","projects::model::task#iscompleted()","projects::model::tasklist#iscompleted()","projects::model::portal#isdefault()","projects::model::tasklist#isrolled()","projects::parser::projectparser#jsontoactivity()","projects::parser::bugparser#jsontobug()","projects::parser::timesheetparser#jsontobuglog()","projects::parser::forumparser#jsontocategory()","projects::parser::forumparser#jsontocomment()","projects::parser::taskparser#jsontocomment()","projects::parser::documentparser#jsontodocument()","projects::parser::eventparser#jsontoevent()","projects::parser::documentparser#jsontofolder()","projects::parser::folderparser#jsontofolder()","projects::parser::forumparser#jsontoforum()","projects::parser::timesheetparser#jsontogenerallog()","projects::parser::milestonesparser#jsontomilestone()","projects::parser::taskparser#jsontoowner()","projects::parser::eventparser#jsontoparticipant()","projects::parser::projectparser#jsontoproject()","projects::parser::projectparser#jsontostatus()","projects::parser::taskparser#jsontotask()","projects::parser::taskparser#jsontotasklist()","projects::parser::tasklistparser#jsontotasklist()","projects::parser::timesheetparser#jsontotasklog()","projects::parser::timesheetparser#jsontotimeloglist()","projects::parser::userparser#jsontouser()","projects::parser::documentparser#jsontoversion()","projects::api::api::new()","projects::api::bugsapi::new()","projects::api::documentsapi::new()","projects::api::eventsapi::new()","projects::api::foldersapi::new()","projects::api::forumsapi::new()","projects::api::milestonesapi::new()","projects::api::portalapi::new()","projects::api::projectsapi::new()","projects::api::tasklistsapi::new()","projects::api::tasksapi::new()","projects::api::timesheetsapi::new()","projects::api::usersapi::new()","projects::pexception::projectsexception::new()","projects::service::zohoprojects::new()","projects::util::zohohttpclient::post()","projects::model::event#setampm()","projects::model::activity#setactivityby()","projects::model::activity#setactivityfor()","projects::model::project#setactivityurl()","projects::model::comment#setaddedby()","projects::model::comment#setaddedperson()","projects::model::bug#setassigneeid()","projects::model::bug#setassigneename()","projects::model::task#setassociatedocumentids()","projects::model::task#setassociateforumids()","projects::model::log#setbillstatus()","projects::model::buglog#setbugid()","projects::model::project#setbugurl()","projects::model::timelog#setbuglogs()","projects::model::forum#setcategoryid()","projects::model::bug#setclassificationid()","projects::model::bug#setclassificationtype()","projects::model::bug#setclosed()","projects::model::project#setclosedbugcount()","projects::model::project#setclosedmilestonecount()","projects::model::project#setclosedtaskcount()","projects::model::portal#setcode()","projects::model::task#setcomments()","projects::model::portal#setcompanyname()","projects::model::task#setcompleted()","projects::model::tasklist#setcompleted()","projects::model::comment#setcontent()","projects::model::forum#setcontent()","projects::model::status#setcontent()","projects::model::document#setcontenttype()","projects::model::portal#setcountry()","projects::model::task#setcreatedby()","projects::model::project#setcreateddate()","projects::model::project#setcreateddateformat()","projects::model::project#setcreateddatelong()","projects::model::task#setcreatedperson()","projects::model::bug#setcreatedtime()","projects::model::comment#setcreatedtime()","projects::model::tasklist#setcreatedtime()","projects::model::bug#setcreatedtimeformat()","projects::model::comment#setcreatedtimeformat()","projects::model::tasklist#setcreatedtimeformat()","projects::model::bug#setcreatedtimelong()","projects::model::comment#setcreatedtimelong()","projects::model::tasklist#setcreatedtimelong()","projects::model::log#setdate()","projects::model::portal#setdateformat()","projects::model::timelog#setdatelong()","projects::model::portal#setdefault()","projects::model::bug#setdescription()","projects::model::document#setdescription()","projects::model::project#setdescription()","projects::model::version#setdescription()","projects::model::timelog#setdisplayformat()","projects::model::activity#setdisplaytime()","projects::model::project#setdocumenturl()","projects::model::bug#setduedate()","projects::model::bug#setduedateformat()","projects::model::bug#setduedatelong()","projects::model::task#setduration()","projects::model::event#setdurationhours()","projects::model::event#setdurationminutes()","projects::model::user#setemail()","projects::model::milestone#setenddate()","projects::model::task#setenddate()","projects::model::milestone#setenddateformat()","projects::model::task#setenddateformat()","projects::model::milestone#setenddatelong()","projects::model::task#setenddatelong()","projects::model::project#seteventurl()","projects::model::version#setfilesize()","projects::model::document#setfilename()","projects::model::bug#setflag()","projects::model::milestone#setflag()","projects::model::tasklist#setflag()","projects::model::document#setfolder()","projects::model::document#setfolderid()","projects::model::project#setfolderurl()","projects::model::project#setforumurl()","projects::model::timelog#setgenerallogs()","projects::model::portal#setgmttimezone()","projects::model::timeloglist#setgrandtotal()","projects::model::event#sethour()","projects::model::log#sethours()","projects::model::log#sethoursdisplay()","projects::model::activity#setid()","projects::model::bug#setid()","projects::model::category#setid()","projects::model::comment#setid()","projects::model::document#setid()","projects::model::event#setid()","projects::model::folder#setid()","projects::model::forum#setid()","projects::model::log#setid()","projects::model::milestone#setid()","projects::model::owner#setid()","projects::model::portal#setid()","projects::model::project#setid()","projects::model::status#setid()","projects::model::task#setid()","projects::model::tasklist#setid()","projects::model::user#setid()","projects::model::version#setid()","projects::model::forum#setisannouncementpost()","projects::model::folder#setisdicussion()","projects::model::event#setisopen()","projects::model::forum#setisstickypost()","projects::model::bug#setkey()","projects::model::portal#setlanguage()","projects::model::event#setlocation()","projects::model::log#setlogdate()","projects::model::log#setlogdateformat()","projects::model::log#setlogdatelong()","projects::model::tasklist#setmilestone()","projects::model::bug#setmilestoneid()","projects::model::project#setmilestoneurl()","projects::model::event#setminutes()","projects::model::log#setminutes()","projects::model::bug#setmoduleid()","projects::model::bug#setmodulename()","projects::model::activity#setname()","projects::model::category#setname()","projects::model::folder#setname()","projects::model::forum#setname()","projects::model::generallog#setname()","projects::model::milestone#setname()","projects::model::owner#setname()","projects::model::portal#setname()","projects::model::project#setname()","projects::model::task#setname()","projects::model::tasklist#setname()","projects::model::user#setname()","projects::model::log#setnotes()","projects::model::document#setnotify()","projects::model::forum#setnotify()","projects::model::event#setoccurred()","projects::model::event#setoccurrences()","projects::model::project#setopenbugcount()","projects::model::project#setopenmilestonecount()","projects::model::project#setopentaskcount()","projects::model::log#setownerid()","projects::model::milestone#setownerid()","projects::model::project#setownerid()","projects::model::log#setownername()","projects::model::milestone#setownername()","projects::model::project#setownername()","projects::model::task#setowners()","projects::model::participant#setparticipantid()","projects::model::participant#setparticipantperson()","projects::model::event#setparticipants()","projects::model::task#setpercentcomplete()","projects::model::comment#setpostdate()","projects::model::forum#setpostdate()","projects::model::comment#setpostdateformat()","projects::model::forum#setpostdateformat()","projects::model::comment#setpostdatelong()","projects::model::forum#setpostdatelong()","projects::model::comment#setpostedby()","projects::model::forum#setpostedby()","projects::model::status#setpostedby()","projects::model::comment#setpostedperson()","projects::model::forum#setpostedperson()","projects::model::status#setpostedperson()","projects::model::status#setpostedtime()","projects::model::status#setpostedtimeformat()","projects::model::status#setpostedtimelong()","projects::model::task#setpriority()","projects::model::bug#setprojectid()","projects::model::log#setprojectid()","projects::model::log#setprojectname()","projects::model::portal#setprojecturl()","projects::model::event#setreminder()","projects::model::event#setrepeat()","projects::model::bug#setreportedperson()","projects::model::bug#setreporterid()","projects::model::bug#setreproducibleid()","projects::model::bug#setreproducibletype()","projects::model::portal#setrole()","projects::model::timeloglist#setrole()","projects::model::user#setrole()","projects::model::tasklist#setrolled()","projects::model::event#setscheduledon()","projects::model::event#setscheduledonlong()","projects::model::tasklist#setsequence()","projects::model::bug#setseverityid()","projects::model::bug#setseveritytype()","projects::model::milestone#setstartdate()","projects::model::task#setstartdate()","projects::model::milestone#setstartdateformat()","projects::model::task#setstartdateformat()","projects::model::milestone#setstartdatelong()","projects::model::task#setstartdatelong()","projects::model::activity#setstate()","projects::model::milestone#setstatus()","projects::model::project#setstatus()","projects::model::tasklist#setstatus()","projects::model::bug#setstatusid()","projects::model::bug#setstatustype()","projects::model::milestone#setstatusurl()","projects::model::project#setstatusurl()","projects::model::task#setsubtasks()","projects::model::document#settags()","projects::model::tasklog#settaskid()","projects::model::tasklog#settaskname()","projects::model::project#settaskurl()","projects::model::tasklist#settaskurl()","projects::model::task#settasklist()","projects::model::project#settasklisturl()","projects::model::timelog#settasklogs()","projects::model::activity#settime()","projects::model::activity#settimelong()","projects::model::portal#settimezone()","projects::model::bug#settimesheeturl()","projects::model::project#settimesheeturl()","projects::model::task#settimesheeturl()","projects::model::bug#settitle()","projects::model::buglog#settitle()","projects::model::event#settitle()","projects::model::timelog#settotalhours()","projects::model::log#settotalminutes()","projects::model::bug#seturl()","projects::model::document#seturl()","projects::model::folder#seturl()","projects::model::forum#seturl()","projects::model::log#seturl()","projects::model::milestone#seturl()","projects::model::project#seturl()","projects::model::task#seturl()","projects::model::tasklist#seturl()","projects::model::comment#setupdatedby()","projects::model::document#setuploaddoc()","projects::model::version#setuploadedby()","projects::model::version#setuploadeddate()","projects::model::version#setuploadeddateformat()","projects::model::version#setuploadeddatelong()","projects::model::version#setuploadedon()","projects::model::forum#setuploadfile()","projects::model::project#setuserurl()","projects::model::version#setversion()","projects::model::document#setversions()","projects::model::portal#setwebsiteurl()","projects::util::zohohttpclient::throwsexception()","projects::model::bug#toparammap()","projects::model::category#toparammap()","projects::model::comment#toparammap()","projects::model::document#toparammap()","projects::model::event#toparammap()","projects::model::folder#toparammap()","projects::model::forum#toparammap()","projects::model::log#toparammap()","projects::model::milestone#toparammap()","projects::model::project#toparammap()","projects::model::status#toparammap()","projects::model::task#toparammap()","projects::model::tasklist#toparammap()","projects::api::bugsapi#update()","projects::api::documentsapi#update()","projects::api::eventsapi#update()","projects::api::forumsapi#update()","projects::api::milestonesapi#update()","projects::api::tasklistsapi#update()","projects::api::tasksapi#update()","projects::api::timesheetsapi#updatebuglog()","projects::api::foldersapi#updatefolder()","projects::api::timesheetsapi#updategenerallog()","projects::api::projectsapi#updateproject()","projects::api::milestonesapi#updatestatus()","projects::api::timesheetsapi#updatetasklog()"],"info":[["Projects","","Projects.html","",""],["Projects::Api","","Projects/Api.html","",""],["Projects::Api::API","","Projects/Api/API.html","","<p>API is used to maintain the base URL and makes a query map using User's\nauthToken and filters.\n\n"],["Projects::Api::BugsAPI","","Projects/Api/BugsAPI.html","","<p>BugsAPI is used to:\n<p>Get list of bugs.\n<p>Get the details of a bug.\n"],["Projects::Api::DocumentsAPI","","Projects/Api/DocumentsAPI.html","","<p>DocumentsAPI is used to:\n<p>Get list of documents.\n<p>Get the details of a document.\n"],["Projects::Api::EventsAPI","","Projects/Api/EventsAPI.html","","<p>EventsAPI is used to:\n<p>Get list of events.\n<p>Add an event.\n"],["Projects::Api::FoldersAPI","","Projects/Api/FoldersAPI.html","","<p>FoldersAPI is used to:\n<p>Get list of folder.\n<p>Add a folder.\n"],["Projects::Api::ForumsAPI","","Projects/Api/ForumsAPI.html","","<p>ForumsAPI is used to:\n<p>Get list of forums.\n<p>Add a forum.\n"],["Projects::Api::MilestonesAPI","","Projects/Api/MilestonesAPI.html","","<p>MilestonesAPI is used to:\n<p>Get list of milestones.\n<p>Get the details of a milestone.\n"],["Projects::Api::PortalAPI","","Projects/Api/PortalAPI.html","","<p>PortalsAPI is used to get list of portals.\n\n"],["Projects::Api::ProjectsAPI","","Projects/Api/ProjectsAPI.html","","<p>ProjectsAPI is used to:\n<p>Get list of projects.\n<p>Get the details of a project.\n"],["Projects::Api::TasklistsAPI","","Projects/Api/TasklistsAPI.html","","<p>TasklistsAPI is used to:\n<p>Get list of tasklists.\n<p>Create a new tasklist.\n"],["Projects::Api::TasksAPI","","Projects/Api/TasksAPI.html","","<p>TasksAPI is used to:\n<p>Get list of tasks.\n<p>Get list of task for the tasklist.\n"],["Projects::Api::TimesheetsAPI","","Projects/Api/TimesheetsAPI.html","","<p>TimesheetAPI is used to:\n<p>Get list of time logs.\n<p>Add new task log.\n"],["Projects::Api::UsersAPI","","Projects/Api/UsersAPI.html","","<p>UsersAPI is used to get list of users for the project.\n\n"],["Projects::Model","","Projects/Model.html","",""],["Projects::Model::Activity","","Projects/Model/Activity.html","","<p>This class is used to make an object for Activity.\n\n"],["Projects::Model::Bug","","Projects/Model/Bug.html","","<p>This class is used to make an object for Bug.\n\n"],["Projects::Model::Buglog","","Projects/Model/Buglog.html","","<p>This class is used to make an object for Buglog.\n\n"],["Projects::Model::Category","","Projects/Model/Category.html","","<p>This class is used to make an object for Category.\n\n"],["Projects::Model::Comment","","Projects/Model/Comment.html","","<p>This class is used to make an object for Comment.\n\n"],["Projects::Model::Document","","Projects/Model/Document.html","","<p>This class is used to make an object for Document.\n\n"],["Projects::Model::Event","","Projects/Model/Event.html","","<p>This class is used to make an object for Event.\n\n"],["Projects::Model::Folder","","Projects/Model/Folder.html","","<p>This class is used to make an object for Folder.\n\n"],["Projects::Model::Forum","","Projects/Model/Forum.html","","<p>This class is used to make an object for Forum.\n\n"],["Projects::Model::Generallog","","Projects/Model/Generallog.html","","<p>This class is used to make an object for Generallog.\n\n"],["Projects::Model::Log","","Projects/Model/Log.html","","<p>This class is used to make an object for Log.\n\n"],["Projects::Model::Milestone","","Projects/Model/Milestone.html","","<p>This class is used to make an object for Milestone.\n\n"],["Projects::Model::Owner","","Projects/Model/Owner.html","","<p>This class is used to make an object for Owner.\n\n"],["Projects::Model::Participant","","Projects/Model/Participant.html","","<p>This class is used to make an object for Participant.\n\n"],["Projects::Model::Portal","","Projects/Model/Portal.html","","<p>This class is used to make an object for Portal.\n\n"],["Projects::Model::Project","","Projects/Model/Project.html","","<p>This class is used to make an object for Project.\n\n"],["Projects::Model::Status","","Projects/Model/Status.html","","<p>This class is used to make an object for Status.\n\n"],["Projects::Model::Task","","Projects/Model/Task.html","","<p>This class is used to make an object for Task.\n\n"],["Projects::Model::Tasklist","","Projects/Model/Tasklist.html","","<p>This class is used to make an object for Tasklist.\n\n"],["Projects::Model::Tasklog","","Projects/Model/Tasklog.html","","<p>This class is used to make an object for Tasklog.\n\n"],["Projects::Model::Timelog","","Projects/Model/Timelog.html","","<p>This class is used to make an object for Timelog.\n\n"],["Projects::Model::TimelogList","","Projects/Model/TimelogList.html","","<p>This class is used to make an object for TimelogList.\n\n"],["Projects::Model::User","","Projects/Model/User.html","","<p>This class is used to make an object for User.\n\n"],["Projects::Model::Version","","Projects/Model/Version.html","","<p>This class is used to make an object for Version.\n\n"],["Projects::Parser","","Projects/Parser.html","",""],["Projects::Parser::BugParser","","Projects/Parser/BugParser.html","","<p>Parse the JSON response into respective objects.\n\n"],["Projects::Parser::DocumentParser","","Projects/Parser/DocumentParser.html","","<p>Parse the JSON response into respective objects.\n\n"],["Projects::Parser::EventParser","","Projects/Parser/EventParser.html","","<p>Parse the JSON response into respective objects.\n\n"],["Projects::Parser::FolderParser","","Projects/Parser/FolderParser.html","","<p>Parse the JSON response into respective objects.\n\n"],["Projects::Parser::ForumParser","","Projects/Parser/ForumParser.html","","<p>Parse the JSON response into respective objects.\n\n"],["Projects::Parser::MilestonesParser","","Projects/Parser/MilestonesParser.html","","<p>Parse the JSON response into respective objects.\n\n"],["Projects::Parser::PortalParser","","Projects/Parser/PortalParser.html","","<p>Parse the JSON response into respective objects.\n\n"],["Projects::Parser::ProjectParser","","Projects/Parser/ProjectParser.html","","<p>Parse the JSON response into respective objects.\n\n"],["Projects::Parser::TaskParser","","Projects/Parser/TaskParser.html","","<p>Parse the JSON response into respective objects.\n\n"],["Projects::Parser::TasklistParser","","Projects/Parser/TasklistParser.html","","<p>Parse the JSON response into respective objects.\n\n"],["Projects::Parser::TimesheetParser","","Projects/Parser/TimesheetParser.html","","<p>Parse the JSON response into respective objects.\n\n"],["Projects::Parser::UserParser","","Projects/Parser/UserParser.html","","<p>Parse the JSON response into respective objects.\n\n"],["Projects::Pexception","","Projects/Pexception.html","",""],["Projects::Pexception::ProjectsException","","Projects/Pexception/ProjectsException.html","","<p>ProjectsException is used to throw a new projects exception with code and\nmessage.\n\n"],["Projects::Service","","Projects/Service.html","",""],["Projects::Service::ZohoProjects","","Projects/Service/ZohoProjects.html","","<p>ZohoProjects is used to provide all API instances for the Zoho Project\nservices.\n\n"],["Projects::Util","","Projects/Util.html","",""],["Projects::Util::ZohoHTTPClient","","Projects/Util/ZohoHTTPClient.html","","<p>ZohoHTTPClient is used to make a HTTP request execution for GET, POST, PUT\nand DELETE requests.\n\n"],["add","Projects::Api::DocumentsAPI","Projects/Api/DocumentsAPI.html#method-i-add","(projectId, document)","<p>Add a document for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>Id of the project.\n"],["add","Projects::Api::EventsAPI","Projects/Api/EventsAPI.html#method-i-add","(projectId, event)","<p>Add an event for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["add","Projects::Api::ForumsAPI","Projects/Api/ForumsAPI.html#method-i-add","(projectId, forum)","<p>Add a forum for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["addBuglog","Projects::Api::TimesheetsAPI","Projects/Api/TimesheetsAPI.html#method-i-addBuglog","(projectId, buglog)","<p>Add a new bug log for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["addCategory","Projects::Api::ForumsAPI","Projects/Api/ForumsAPI.html#method-i-addCategory","(projectId, category)","<p>Add a category for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["addComment","Projects::Api::ForumsAPI","Projects/Api/ForumsAPI.html#method-i-addComment","(projectId, forumId, comment)","<p>Add comment for the forum.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["addFolder","Projects::Api::FoldersAPI","Projects/Api/FoldersAPI.html#method-i-addFolder","(projectId, folder)","<p>Add a folder for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["addGenerallog","Projects::Api::TimesheetsAPI","Projects/Api/TimesheetsAPI.html#method-i-addGenerallog","(projectId, generallog)","<p>Add a new general log for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["addProjectStatus","Projects::Api::ProjectsAPI","Projects/Api/ProjectsAPI.html#method-i-addProjectStatus","(projectId,status)","<p>Add the status for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["addTasklog","Projects::Api::TimesheetsAPI","Projects/Api/TimesheetsAPI.html#method-i-addTasklog","(projectId, tasklog)","<p>Add a new task log for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["create","Projects::Api::BugsAPI","Projects/Api/BugsAPI.html#method-i-create","(projectId, bug)","<p>Create a Bug for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["create","Projects::Api::MilestonesAPI","Projects/Api/MilestonesAPI.html#method-i-create","(projectId,milestone)","<p>Create a milestone for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["create","Projects::Api::TasklistsAPI","Projects/Api/TasklistsAPI.html#method-i-create","(projectId,tasklist)","<p>Create a new tasklist for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["create","Projects::Api::TasksAPI","Projects/Api/TasksAPI.html#method-i-create","(projectId, task)","<p>Create a new task for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["createProject","Projects::Api::ProjectsAPI","Projects/Api/ProjectsAPI.html#method-i-createProject","(project)","<p>Create a new project.\n\n<p>Parameters\n<p><p>project &mdash; <p>Project object.\n"],["delete","Projects::Api::BugsAPI","Projects/Api/BugsAPI.html#method-i-delete","(projectId, bugId)","<p>Delete an existing bug for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["delete","Projects::Api::DocumentsAPI","Projects/Api/DocumentsAPI.html#method-i-delete","(projectId, documentId)","<p>Delete an existing document for the project.\n\n<p>Attributes\n<p><p>projectId &mdash; <p>ID of the project.\n"],["delete","Projects::Api::EventsAPI","Projects/Api/EventsAPI.html#method-i-delete","(projectId, eventId)","<p>Delete an existing event for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["delete","Projects::Api::ForumsAPI","Projects/Api/ForumsAPI.html#method-i-delete","(projectId, forumId)","<p>Delete an existing forum for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["delete","Projects::Api::MilestonesAPI","Projects/Api/MilestonesAPI.html#method-i-delete","(projectId,milestoneId)","<p>Delete an existing milestone for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["delete","Projects::Api::TasklistsAPI","Projects/Api/TasklistsAPI.html#method-i-delete","(projectId, tasklistId)","<p>Delete an existing tasklist for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["delete","Projects::Api::TasksAPI","Projects/Api/TasksAPI.html#method-i-delete","(projectId, taskId)","<p>Delete an existing task.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["delete","Projects::Util::ZohoHTTPClient","Projects/Util/ZohoHTTPClient.html#method-c-delete","(url,queryMap)","<p>Make a DELETE request for the given URL and a query string.\n<p>Calls getResult to return the JSON response ...\n\n"],["deleteBuglog","Projects::Api::TimesheetsAPI","Projects/Api/TimesheetsAPI.html#method-i-deleteBuglog","(projectId, bugId, logId)","<p>Delete an existing bug log for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["deleteFolder","Projects::Api::FoldersAPI","Projects/Api/FoldersAPI.html#method-i-deleteFolder","(projectId, folderId)","<p>Delete an existing folder for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["deleteGenerallog","Projects::Api::TimesheetsAPI","Projects/Api/TimesheetsAPI.html#method-i-deleteGenerallog","(projectId, logId)","<p>Delete an existing general log for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["deleteProject","Projects::Api::ProjectsAPI","Projects/Api/ProjectsAPI.html#method-i-deleteProject","(projectId)","<p>Delete an existing project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["deleteTasklog","Projects::Api::TimesheetsAPI","Projects/Api/TimesheetsAPI.html#method-i-deleteTasklog","(projectId, taskId, logId)","<p>Delete an existing task log for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["get","Projects::Api::BugsAPI","Projects/Api/BugsAPI.html#method-i-get","(projectId, bugId)","<p>Get the details of a bug.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["get","Projects::Api::DocumentsAPI","Projects/Api/DocumentsAPI.html#method-i-get","(projectId, documentId, queryMap)","<p>Get the details of a document.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["get","Projects::Api::MilestonesAPI","Projects/Api/MilestonesAPI.html#method-i-get","(projectId,milestoneId)","<p>Get the details of a milestone.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["get","Projects::Api::ProjectsAPI","Projects/Api/ProjectsAPI.html#method-i-get","(projectId)","<p>Get the details of a project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["get","Projects::Api::TasksAPI","Projects/Api/TasksAPI.html#method-i-get","(projectId, taskId)","<p>Get the details of a task.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["get","Projects::Util::ZohoHTTPClient","Projects/Util/ZohoHTTPClient.html#method-c-get","(url,queryMap)","<p>Make a GET request and fetch the response for the given URL and a query\nstring.\n<p>Calls getResult to return ...\n\n"],["getAMPM","Projects::Model::Event","Projects/Model/Event.html#method-i-getAMPM","()","<p>Get AM or PM for the event.\n\n<p>Returns\n<p>Time format of the event in AM or PM.\n"],["getActivities","Projects::Parser::ProjectParser","Projects/Parser/ProjectParser.html#method-i-getActivities","(response)","<p>Parse the JSON response and make it into List of Activity object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response ...\n"],["getActivityBy","Projects::Model::Activity","Projects/Model/Activity.html#method-i-getActivityBy","()","<p>Get who posted the activity.\n\n<p>Returns\n<p>User who posted the activity.\n"],["getActivityFor","Projects::Model::Activity","Projects/Model/Activity.html#method-i-getActivityFor","()","<p>Get the activity for which topic.\n\n<p>Returns\n<p>Th topic of the activity.\n"],["getActivityURL","Projects::Model::Project","Projects/Model/Project.html#method-i-getActivityURL","()","<p>Get the activity URL.\n\n<p>Returns\n<p>Activity URL.\n"],["getAddedBy","Projects::Model::Comment","Projects/Model/Comment.html#method-i-getAddedBy","()","<p>Get the comment added person id.\n\n<p>Returns\n<p>Id of the person who added the comment.\n"],["getAddedPerson","Projects::Model::Comment","Projects/Model/Comment.html#method-i-getAddedPerson","()","<p>Get the comment added person.\n\n<p>Returns\n<p>Person who added comment.\n"],["getAssigneeId","Projects::Model::Bug","Projects/Model/Bug.html#method-i-getAssigneeId","()","<p>Get the assignee id.\n\n<p>Returns\n<p>Assignee id.\n"],["getAssigneeName","Projects::Model::Bug","Projects/Model/Bug.html#method-i-getAssigneeName","()","<p>Get the assignee name.\n\n<p>Returns\n<p>Assignee name.\n"],["getAssociateDocumentIds","Projects::Model::Task","Projects/Model/Task.html#method-i-getAssociateDocumentIds","()","<p>Get the associated document IDs of the task.\n\n<p>Returns\n<p>Array of document IDs.\n"],["getAssociateForumIds","Projects::Model::Task","Projects/Model/Task.html#method-i-getAssociateForumIds","()","<p>Get the associated forum IDs of the task.\n\n<p>Returns\n<p>Array of forum IDs.\n"],["getBaseURL","Projects::Api::API","Projects/Api/API.html#method-i-getBaseURL","()","<p>Get the base URL of the service.\n\n<p>Returns\n<p>Base URL.\n"],["getBillStatus","Projects::Model::Log","Projects/Model/Log.html#method-i-getBillStatus","()","<p>Get the bill status for the log.\n\n<p>Returns\n<p>Bill status.\n"],["getBug","Projects::Parser::BugParser","Projects/Parser/BugParser.html#method-i-getBug","(response)","<p>Parse the JSON response and make it into Bug object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response contains the ...\n"],["getBugId","Projects::Model::Buglog","Projects/Model/Buglog.html#method-i-getBugId","()","<p>Get the bug id.\n\n<p>Returns\n<p>Bug id.\n"],["getBugURL","Projects::Model::Project","Projects/Model/Project.html#method-i-getBugURL","()","<p>Get the bug URL.\n\n<p>Returns\n<p>bug URL.\n"],["getBuglog","Projects::Parser::TimesheetParser","Projects/Parser/TimesheetParser.html#method-i-getBuglog","(response)","<p>Parse the JSON response and make it into the Buglog object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response contains ...\n"],["getBuglogs","Projects::Model::Timelog","Projects/Model/Timelog.html#method-i-getBuglogs","()","<p>Get the bug logs.\n\n<p>Returns\n<p>List of Buglog object.\n"],["getBugs","Projects::Api::BugsAPI","Projects/Api/BugsAPI.html#method-i-getBugs","(projectId, queryMap)","<p>Get list of bugs for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["getBugs","Projects::Parser::BugParser","Projects/Parser/BugParser.html#method-i-getBugs","(response)","<p>Parse the JSON response and make it into List of Bug object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response contains ...\n"],["getBugsAPI","Projects::Service::ZohoProjects","Projects/Service/ZohoProjects.html#method-i-getBugsAPI","()","<p>Get an instance of bugs API.\n\n<p>Returns\n<p>BugsAPI object.\n"],["getCategories","Projects::Api::ForumsAPI","Projects/Api/ForumsAPI.html#method-i-getCategories","(projectId)","<p>Get list of categories for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["getCategories","Projects::Parser::ForumParser","Projects/Parser/ForumParser.html#method-i-getCategories","(response)","<p>Parse the JSON response and make it into List of Category object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response ...\n"],["getCategory","Projects::Parser::ForumParser","Projects/Parser/ForumParser.html#method-i-getCategory","(response)","<p>Parse the JSON response and make it into Category object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response contains ...\n"],["getCategoryId","Projects::Model::Forum","Projects/Model/Forum.html#method-i-getCategoryId","()","<p>Get the category id of the project.\n\n<p>Returns\n<p>project category id.\n"],["getClassificationId","Projects::Model::Bug","Projects/Model/Bug.html#method-i-getClassificationId","()","<p>Get the classification id.\n\n<p>Returns\n<p>Classification id.\n"],["getClassificationType","Projects::Model::Bug","Projects/Model/Bug.html#method-i-getClassificationType","()","<p>Get the classification type.\n\n<p>Returns\n<p>Classification type.\n"],["getClosedBugCount","Projects::Model::Project","Projects/Model/Project.html#method-i-getClosedBugCount","()","<p>Get the closed bug count.\n\n<p>Returns\n<p>Closed bug count for the project.\n"],["getClosedMilestoneCount","Projects::Model::Project","Projects/Model/Project.html#method-i-getClosedMilestoneCount","()","<p>Get the closed milestone count.\n\n<p>Returns\n<p>closed milestone count for the project.\n"],["getClosedTaskCount","Projects::Model::Project","Projects/Model/Project.html#method-i-getClosedTaskCount","()","<p>Get the closed task count.\n\n<p>Returns\n<p>Closed task count for the project.\n"],["getCode","Projects::Model::Portal","Projects/Model/Portal.html#method-i-getCode","()","<p>Get the language code.\n\n<p>Returns\n<p>Language code.\n"],["getCode","Projects::Pexception::ProjectsException","Projects/Pexception/ProjectsException.html#method-i-getCode","()","<p>get the error code.\n\n<p>Returns\n<p>Error code.\n"],["getComment","Projects::Parser::ForumParser","Projects/Parser/ForumParser.html#method-i-getComment","(response)","<p>Parse the JSON response and make it into Comment object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response contains ...\n"],["getComments","Projects::Api::ForumsAPI","Projects/Api/ForumsAPI.html#method-i-getComments","(projectId, forumId, queryMap)","<p>Get list of Comment for the forum.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["getComments","Projects::Model::Task","Projects/Model/Task.html#method-i-getComments","()","<p>Get the comments of the task.\n\n<p>Returns\n<p>List of Comment object.\n"],["getComments","Projects::Parser::ForumParser","Projects/Parser/ForumParser.html#method-i-getComments","(response)","<p>Parse the JSON response and make it into List of Comment object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response ...\n"],["getCompanyName","Projects::Model::Portal","Projects/Model/Portal.html#method-i-getCompanyName","()","<p>Get the company name.\n\n<p>Returns\n<p>Company name.\n"],["getContent","Projects::Model::Comment","Projects/Model/Comment.html#method-i-getContent","()","<p>Get the comment content.\n\n<p>Returns\n<p>Comment content.\n"],["getContent","Projects::Model::Forum","Projects/Model/Forum.html#method-i-getContent","()","<p>Get the content of the forum.\n\n<p>Returns\n<p>Content of the forum.\n"],["getContent","Projects::Model::Status","Projects/Model/Status.html#method-i-getContent","()","<p>Get the status content.\n\n<p>Returns\n<p>Status content.\n"],["getContenttype","Projects::Model::Document","Projects/Model/Document.html#method-i-getContenttype","()","<p>Get the content type.\n\n<p>Returns\n<p>Content type of the file.\n"],["getCountry","Projects::Model::Portal","Projects/Model/Portal.html#method-i-getCountry","()","<p>Get the country.\n\n<p>Returns\n<p>Country name.\n"],["getCreatedBy","Projects::Model::Task","Projects/Model/Task.html#method-i-getCreatedBy","()","<p>Get the id of the user who created the task.\n\n<p>Returns\n<p>Id of the person who created the task.\n"],["getCreatedDate","Projects::Model::Project","Projects/Model/Project.html#method-i-getCreatedDate","()","<p>Get the project created date.\n\n<p>Returns\n<p>Project created date.\n"],["getCreatedDateFormat","Projects::Model::Project","Projects/Model/Project.html#method-i-getCreatedDateFormat","()","<p>Get the created date format for the project.\n\n<p>Returns\n<p>Project created date format.\n"],["getCreatedDateLong","Projects::Model::Project","Projects/Model/Project.html#method-i-getCreatedDateLong","()","<p>Get the project created date long.\n\n<p>Returns\n<p>project created date long.\n"],["getCreatedPerson","Projects::Model::Task","Projects/Model/Task.html#method-i-getCreatedPerson","()","<p>Get the name of the person who created the task.\n\n<p>Returns\n<p>Task created person name.\n"],["getCreatedTime","Projects::Model::Bug","Projects/Model/Bug.html#method-i-getCreatedTime","()","<p>Get the created time.\n\n<p>Returns\n<p>created time for the bug.\n"],["getCreatedTime","Projects::Model::Comment","Projects/Model/Comment.html#method-i-getCreatedTime","()","<p>Get the created time.\n\n<p>Returns\n<p>Created time.\n"],["getCreatedTime","Projects::Model::Tasklist","Projects/Model/Tasklist.html#method-i-getCreatedTime","()","<p>Get the task list created time.\n\n<p>Returns\n<p>Task list created time.\n"],["getCreatedTimeFormat","Projects::Model::Bug","Projects/Model/Bug.html#method-i-getCreatedTimeFormat","()","<p>Get the created time format.\n\n<p>Returns\n<p>Created time format for the bug.\n"],["getCreatedTimeFormat","Projects::Model::Comment","Projects/Model/Comment.html#method-i-getCreatedTimeFormat","()","<p>Get the created time format.\n\n<p>Returns\n<p>Created time format.\n"],["getCreatedTimeFormat","Projects::Model::Tasklist","Projects/Model/Tasklist.html#method-i-getCreatedTimeFormat","()","<p>Get the task list created time format.\n\n<p>Returns\n<p>Task list created time format.\n"],["getCreatedTimeLong","Projects::Model::Bug","Projects/Model/Bug.html#method-i-getCreatedTimeLong","()","<p>Get the created time long.\n\n<p>Returns\n<p>Created time for the bug.\n"],["getCreatedTimeLong","Projects::Model::Comment","Projects/Model/Comment.html#method-i-getCreatedTimeLong","()","<p>Get the created time long.\n\n<p>Returns\n<p>Created time.\n"],["getCreatedTimeLong","Projects::Model::Tasklist","Projects/Model/Tasklist.html#method-i-getCreatedTimeLong","()","<p>Get the task list created time long.\n\n<p>Returns\n<p>Task list created time long.\n"],["getDate","Projects::Model::Log","Projects/Model/Log.html#method-i-getDate","()","<p>Get the log date.\n\n<p>Returns\n<p>Log date.\n"],["getDateFormat","Projects::Model::Portal","Projects/Model/Portal.html#method-i-getDateFormat","()","<p>Get the date format.\n\n<p>Returns\n<p>Date format of the portal.\n"],["getDateLong","Projects::Model::Timelog","Projects/Model/Timelog.html#method-i-getDateLong","()","<p>Get the date long of the time log.\n\n<p>Returns\n<p>date of the time log.\n"],["getDescription","Projects::Model::Bug","Projects/Model/Bug.html#method-i-getDescription","()","<p>Get the bug description.\n\n<p>Returns\n<p>Bug description.\n"],["getDescription","Projects::Model::Document","Projects/Model/Document.html#method-i-getDescription","()","<p>Get the description of the document.\n\n<p>Returns\n<p>Document description.\n"],["getDescription","Projects::Model::Project","Projects/Model/Project.html#method-i-getDescription","()","<p>Get the project description.\n\n<p>Returns\n<p>Project description.\n"],["getDescription","Projects::Model::Version","Projects/Model/Version.html#method-i-getDescription","()","<p>Get the version description.\n\n<p>Returns\n<p>Version description.\n"],["getDisplayFormat","Projects::Model::Timelog","Projects/Model/Timelog.html#method-i-getDisplayFormat","()","<p>Get the display format of the date.\n\n<p>Returns\n<p>display format of the date.\n"],["getDisplayTime","Projects::Model::Activity","Projects/Model/Activity.html#method-i-getDisplayTime","()","<p>Get the display time for the activity.\n\n<p>Returns\n<p>Display time for the activity.\n"],["getDocument","Projects::Parser::DocumentParser","Projects/Parser/DocumentParser.html#method-i-getDocument","(response)","<p>Parse the JSON response and make it into Document object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response contains ...\n"],["getDocumentURL","Projects::Model::Project","Projects/Model/Project.html#method-i-getDocumentURL","()","<p>Get the document URL.\n\n<p>Returns\n<p>Document URL.\n"],["getDocuments","Projects::Api::DocumentsAPI","Projects/Api/DocumentsAPI.html#method-i-getDocuments","(projectId, queryMap)","<p>Get list of documents for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["getDocuments","Projects::Parser::DocumentParser","Projects/Parser/DocumentParser.html#method-i-getDocuments","(response)","<p>Parse the JSON response and make it into List of Document object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response ...\n"],["getDocumentsAPI","Projects::Service::ZohoProjects","Projects/Service/ZohoProjects.html#method-i-getDocumentsAPI","()","<p>Get an instance of documents API.\n\n<p>Returns\n<p>DocumentsAPI object.\n"],["getDueDate","Projects::Model::Bug","Projects/Model/Bug.html#method-i-getDueDate","()","<p>Get the due date.\n\n<p>Returns\n<p>Due date.\n"],["getDueDateFormat","Projects::Model::Bug","Projects/Model/Bug.html#method-i-getDueDateFormat","()","<p>Get the due date format.\n\n<p>Returns\n<p>Due date format.\n"],["getDueDateLong","Projects::Model::Bug","Projects/Model/Bug.html#method-i-getDueDateLong","()","<p>Get the due date long.\n\n<p>Returns\n<p>Due date.\n"],["getDuration","Projects::Model::Task","Projects/Model/Task.html#method-i-getDuration","()","<p>Get the task duration.\n\n<p>Returns\n<p>Task duration.\n"],["getDurationHours","Projects::Model::Event","Projects/Model/Event.html#method-i-getDurationHours","()","<p>Get the duration hour for the event.\n\n<p>Returns\n<p>Event duration in hours.\n"],["getDurationMinutes","Projects::Model::Event","Projects/Model/Event.html#method-i-getDurationMinutes","()","<p>Get the duration minutes for the event.\n\n<p>Returns\n<p>Event duration in minutes.\n"],["getEmail","Projects::Model::User","Projects/Model/User.html#method-i-getEmail","()","<p>Get the user email.\n\n<p>Returns\n<p>User email.\n"],["getEndDate","Projects::Model::Milestone","Projects/Model/Milestone.html#method-i-getEndDate","()","<p>Get the end date of the milestone.\n\n<p>Returns\n<p>End date of the milestone.\n"],["getEndDate","Projects::Model::Task","Projects/Model/Task.html#method-i-getEndDate","()","<p>Get the task end date.\n\n<p>Returns\n<p>task end date.\n"],["getEndDateFormat","Projects::Model::Milestone","Projects/Model/Milestone.html#method-i-getEndDateFormat","()","<p>Get the end date format.\n\n<p>Returns\n<p>End date format.\n"],["getEndDateFormat","Projects::Model::Task","Projects/Model/Task.html#method-i-getEndDateFormat","()","<p>Get the task end date format.\n\n<p>Returns\n<p>Task end date format.\n"],["getEndDateLong","Projects::Model::Milestone","Projects/Model/Milestone.html#method-i-getEndDateLong","()","<p>Get the end date.\n\n<p>Returns\n<p>End date.\n"],["getEndDateLong","Projects::Model::Task","Projects/Model/Task.html#method-i-getEndDateLong","()","<p>Get the end date long.\n\n<p>Returns\n<p>Task end date long.\n"],["getEvent","Projects::Parser::EventParser","Projects/Parser/EventParser.html#method-i-getEvent","(response)","<p>Parse the JSON response and make it into Event object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response contains ...\n"],["getEventURL","Projects::Model::Project","Projects/Model/Project.html#method-i-getEventURL","()","<p>Get the event URL.\n\n<p>Returns\n<p>Event URL.\n"],["getEvents","Projects::Api::EventsAPI","Projects/Api/EventsAPI.html#method-i-getEvents","(projectId, queryMap)","<p>Get list of events for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["getEvents","Projects::Parser::EventParser","Projects/Parser/EventParser.html#method-i-getEvents","(response)","<p>Parse the JSON response and make it into List of Event object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response contains ...\n"],["getEventsAPI","Projects::Service::ZohoProjects","Projects/Service/ZohoProjects.html#method-i-getEventsAPI","()","<p>Get an instance of events API.\n\n<p>Returns\n<p>EventsAPI object.\n"],["getFileSize","Projects::Model::Version","Projects/Model/Version.html#method-i-getFileSize","()","<p>Get the file size.\n\n<p>Returns\n<p>File size.\n"],["getFilename","Projects::Model::Document","Projects/Model/Document.html#method-i-getFilename","()","<p>Get the file name.\n\n<p>Returns\n<p>File name.\n"],["getFlag","Projects::Model::Bug","Projects/Model/Bug.html#method-i-getFlag","()","<p>Get the flag for the bug.\n\n<p>Returns\n<p>Flag of the bug.\n"],["getFlag","Projects::Model::Milestone","Projects/Model/Milestone.html#method-i-getFlag","()","<p>Get the flag for the milestone.\n\n<p>Returns\n<p>Flag for the milestone.\n"],["getFlag","Projects::Model::Tasklist","Projects/Model/Tasklist.html#method-i-getFlag","()","<p>Get the flag for the task list.\n\n<p>Returns\n<p>Task list flag.\n"],["getFolder","Projects::Model::Document","Projects/Model/Document.html#method-i-getFolder","()","<p>Get the folder object.\n\n<p>Returns\n<p>Folder object.\n"],["getFolder","Projects::Parser::FolderParser","Projects/Parser/FolderParser.html#method-i-getFolder","(response)","<p>Parse the JSON response and make it into Folder object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response contains ...\n"],["getFolderId","Projects::Model::Document","Projects/Model/Document.html#method-i-getFolderId","()","<p>Get the folder id.\n\n<p>Returns\n<p>Folder id.\n"],["getFolderURL","Projects::Model::Project","Projects/Model/Project.html#method-i-getFolderURL","()","<p>Get the folder URL.\n\n<p>Returns\n<p>Folder URL.\n"],["getFolders","Projects::Api::FoldersAPI","Projects/Api/FoldersAPI.html#method-i-getFolders","(projectId)","<p>Get list of folders for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["getFolders","Projects::Parser::FolderParser","Projects/Parser/FolderParser.html#method-i-getFolders","(response)","<p>Parse the JSON response and make it into List of Folder object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response ...\n"],["getFoldersAPI","Projects::Service::ZohoProjects","Projects/Service/ZohoProjects.html#method-i-getFoldersAPI","()","<p>Get an instance of folder API.\n\n<p>Returns\n<p>FoldersAPI object.\n"],["getForum","Projects::Parser::ForumParser","Projects/Parser/ForumParser.html#method-i-getForum","(response)","<p>Parse the JSON response and make it into Forum object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response contains ...\n"],["getForumURL","Projects::Model::Project","Projects/Model/Project.html#method-i-getForumURL","()","<p>Get the forum URL.\n\n<p>Returns\n<p>Forum URL.\n"],["getForums","Projects::Api::ForumsAPI","Projects/Api/ForumsAPI.html#method-i-getForums","(projectId, queryMap)","<p>Get list of forum for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["getForums","Projects::Parser::ForumParser","Projects/Parser/ForumParser.html#method-i-getForums","(response)","<p>Parse the JSON response and make it into List of Forum object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response contains ...\n"],["getForumsAPI","Projects::Service::ZohoProjects","Projects/Service/ZohoProjects.html#method-i-getForumsAPI","()","<p>Get an instance of forums API.\n\n<p>Returns\n<p>ForumsAPI object.\n"],["getGenerallog","Projects::Parser::TimesheetParser","Projects/Parser/TimesheetParser.html#method-i-getGenerallog","(response)","<p>Parse the JSON response and make it into the Generallog object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response ...\n"],["getGenerallogs","Projects::Model::Timelog","Projects/Model/Timelog.html#method-i-getGenerallogs","()","<p>Get the general logs.\n\n<p>Returns\n<p>List of Generallog object.\n"],["getGmtTimeZone","Projects::Model::Portal","Projects/Model/Portal.html#method-i-getGmtTimeZone","()","<p>Get the gmt time zone.\n\n<p>Returns\n<p>gmt time zone.\n"],["getGrandtotal","Projects::Model::TimelogList","Projects/Model/TimelogList.html#method-i-getGrandtotal","()","<p>Get the grand total of the time log.\n\n<p>Returns\n<p>The grand total of the timelog.\n"],["getHeader","Projects::Util::ZohoHTTPClient","Projects/Util/ZohoHTTPClient.html#method-c-getHeader","()","<p>Returns\n<p>header for the http request\n\n"],["getHour","Projects::Model::Event","Projects/Model/Event.html#method-i-getHour","()","<p>Get the hour for the event.\n\n<p>Returns\n<p>Event hour.\n"],["getHours","Projects::Model::Log","Projects/Model/Log.html#method-i-getHours","()","<p>Get the hours for the log.\n\n<p>Returns\n<p>Log hours.\n"],["getHoursDisplay","Projects::Model::Log","Projects/Model/Log.html#method-i-getHoursDisplay","()","<p>Get the hour display format.\n\n<p>Returns\n<p>Hour display format.\n"],["getHttpUri","Projects::Util::ZohoHTTPClient","Projects/Util/ZohoHTTPClient.html#method-c-getHttpUri","(url)","<p>Returns the http and uri objects for making request and response\n\n<p>Parameters\n<p><p>http &mdash; <p>Object of NET::HTTP\n"],["getId","Projects::Model::Activity","Projects/Model/Activity.html#method-i-getId","()","<p>Get the activity id.\n\n<p>Returns\n<p>Activity id.\n"],["getId","Projects::Model::Bug","Projects/Model/Bug.html#method-i-getId","()","<p>Get the bug id.\n\n<p>Returns\n<p>Bug id.\n"],["getId","Projects::Model::Category","Projects/Model/Category.html#method-i-getId","()","<p>Get the category id.\n\n<p>Returns\n<p>Category id.\n"],["getId","Projects::Model::Comment","Projects/Model/Comment.html#method-i-getId","()","<p>Get the comment id.\n\n<p>Returns\n<p>Comment id.\n"],["getId","Projects::Model::Document","Projects/Model/Document.html#method-i-getId","()","<p>Get the document id.\n\n<p>Returns\n<p>Document id.\n"],["getId","Projects::Model::Event","Projects/Model/Event.html#method-i-getId","()","<p>Get the event id.\n\n<p>Returns\n<p>Event id.\n"],["getId","Projects::Model::Folder","Projects/Model/Folder.html#method-i-getId","()","<p>Get the folder id.\n\n<p>Returns\n<p>Folder id.\n"],["getId","Projects::Model::Forum","Projects/Model/Forum.html#method-i-getId","()","<p>Get the forum id.\n\n<p>Returns\n<p>Forum id.\n"],["getId","Projects::Model::Log","Projects/Model/Log.html#method-i-getId","()","<p>Get the log id.\n\n<p>Returns\n<p>Log id.\n"],["getId","Projects::Model::Milestone","Projects/Model/Milestone.html#method-i-getId","()","<p>Get the milestone id.\n\n<p>Returns\n<p>Milestone id.\n"],["getId","Projects::Model::Owner","Projects/Model/Owner.html#method-i-getId","()","<p>Get the owner id.\n\n<p>Returns\n<p>Owner id.\n"],["getId","Projects::Model::Portal","Projects/Model/Portal.html#method-i-getId","()","<p>Get the portal id.\n\n<p>Returns\n<p>Portal id.\n"],["getId","Projects::Model::Project","Projects/Model/Project.html#method-i-getId","()","<p>Set the project id.\n\n<p>Parameters\n<p><p>id &mdash; <p>ID of the project.\n"],["getId","Projects::Model::Status","Projects/Model/Status.html#method-i-getId","()","<p>Get the status id.\n\n<p>Returns\n<p>status id.\n"],["getId","Projects::Model::Task","Projects/Model/Task.html#method-i-getId","()","<p>Get the task id.\n\n<p>Returns\n<p>Task id.\n"],["getId","Projects::Model::Tasklist","Projects/Model/Tasklist.html#method-i-getId","()","<p>Get the task list id.\n\n<p>Returns\n<p>Task list id.\n"],["getId","Projects::Model::User","Projects/Model/User.html#method-i-getId","()","<p>Get the user id.\n\n<p>Returns\n<p>User id.\n"],["getId","Projects::Model::Version","Projects/Model/Version.html#method-i-getId","()","<p>Get the version id.\n\n<p>Returns\n<p>Version id.\n"],["getKey","Projects::Model::Bug","Projects/Model/Bug.html#method-i-getKey","()","<p>Get the key for the bug.\n\n<p>Returns\n<p>Bug key.\n"],["getLanguage","Projects::Model::Portal","Projects/Model/Portal.html#method-i-getLanguage","()","<p>Get the language.\n\n<p>Returns\n<p>Language of the portal.\n"],["getLocation","Projects::Model::Event","Projects/Model/Event.html#method-i-getLocation","()","<p>Get the event location.\n\n<p>Returns\n<p>Event location.\n"],["getLogDate","Projects::Model::Log","Projects/Model/Log.html#method-i-getLogDate","()","<p>Get the log date.\n\n<p>Returns\n<p>Log date.\n"],["getLogDateFormat","Projects::Model::Log","Projects/Model/Log.html#method-i-getLogDateFormat","()","<p>Get the log date format.\n\n<p>Returns\n<p>Log date format.\n"],["getLogDateLong","Projects::Model::Log","Projects/Model/Log.html#method-i-getLogDateLong","()","<p>Get the log date.\n\n<p>Returns\n<p>Log date.\n"],["getMessage","Projects::Pexception::ProjectsException","Projects/Pexception/ProjectsException.html#method-i-getMessage","()","<p>get the error message.\n\n<p>Returns\n<p>Error message.\n"],["getMilestone","Projects::Model::Tasklist","Projects/Model/Tasklist.html#method-i-getMilestone","()","<p>Get the milestone for the task list.\n\n<p>Returns\n<p>Milestone object.\n"],["getMilestone","Projects::Parser::MilestonesParser","Projects/Parser/MilestonesParser.html#method-i-getMilestone","(response)","<p>Parse the JSON response and make it into Milestone object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response contains ...\n"],["getMilestoneId","Projects::Model::Bug","Projects/Model/Bug.html#method-i-getMilestoneId","()","<p>Get the milestone id.\n\n<p>Returns\n<p>Milestone id.\n"],["getMilestoneURL","Projects::Model::Project","Projects/Model/Project.html#method-i-getMilestoneURL","()","<p>Get the milestone URL.\n\n<p>Returns\n<p>milestone URL.\n"],["getMilestones","Projects::Api::MilestonesAPI","Projects/Api/MilestonesAPI.html#method-i-getMilestones","(projectId, * queryMap)","<p>Get list of milestones for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["getMilestones","Projects::Parser::MilestonesParser","Projects/Parser/MilestonesParser.html#method-i-getMilestones","(response)","<p>Parse the JSON response and make it into List of Milestone object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response ...\n"],["getMilestonesAPI","Projects::Service::ZohoProjects","Projects/Service/ZohoProjects.html#method-i-getMilestonesAPI","()","<p>Get an instance of milestones API.\n\n<p>Returns\n<p>MilestonesAPI object.\n"],["getMinutes","Projects::Model::Event","Projects/Model/Event.html#method-i-getMinutes","()","<p>Get the minutes for the event.\n\n<p>Returns\n<p>Minutes for the event.\n"],["getMinutes","Projects::Model::Log","Projects/Model/Log.html#method-i-getMinutes","()","<p>Get the minutes for the log.\n\n<p>Returns\n<p>Log minutes.\n"],["getModuleId","Projects::Model::Bug","Projects/Model/Bug.html#method-i-getModuleId","()","<p>Get the module id.\n\n<p>Returns\n<p>Module id.\n"],["getModuleName","Projects::Model::Bug","Projects/Model/Bug.html#method-i-getModuleName","()","<p>Get the module name.\n\n<p>Returns\n<p>Module name.\n"],["getName","Projects::Model::Activity","Projects/Model/Activity.html#method-i-getName","()","<p>Get the activity name.\n\n<p>Returns\n<p>Activity name.\n"],["getName","Projects::Model::Category","Projects/Model/Category.html#method-i-getName","()","<p>Get the category name.\n\n<p>Returns\n<p>Category name.\n"],["getName","Projects::Model::Folder","Projects/Model/Folder.html#method-i-getName","()","<p>Get the folder name.\n\n<p>Returns\n<p>Folder name.\n"],["getName","Projects::Model::Forum","Projects/Model/Forum.html#method-i-getName","()","<p>Get the forum name.\n\n<p>Returns\n<p>Forum name.\n"],["getName","Projects::Model::Generallog","Projects/Model/Generallog.html#method-i-getName","()","<p>Get the name of the general log.\n\n<p>Returns\n<p>General log name.\n"],["getName","Projects::Model::Milestone","Projects/Model/Milestone.html#method-i-getName","()","<p>Get the milestone name.\n\n<p>Returns\n<p>Milestone name.\n"],["getName","Projects::Model::Owner","Projects/Model/Owner.html#method-i-getName","()","<p>Get the owner name.\n\n<p>Returns\n<p>Owner name.\n"],["getName","Projects::Model::Portal","Projects/Model/Portal.html#method-i-getName","()","<p>Get the portal name.\n\n<p>Returns\n<p>Portal name.\n"],["getName","Projects::Model::Project","Projects/Model/Project.html#method-i-getName","()","<p>Get the project name.\n\n<p>Returns\n<p>Project name.\n"],["getName","Projects::Model::Task","Projects/Model/Task.html#method-i-getName","()","<p>Get the task name.\n\n<p>Returns\n<p>Task name.\n"],["getName","Projects::Model::Tasklist","Projects/Model/Tasklist.html#method-i-getName","()","<p>Get the task list name.\n\n<p>Returns\n<p>task list name.\n"],["getName","Projects::Model::User","Projects/Model/User.html#method-i-getName","()","<p>Get the user name.\n\n<p>Returns\n<p>User name.\n"],["getNotes","Projects::Model::Log","Projects/Model/Log.html#method-i-getNotes","()","<p>Get the log notes.\n\n<p>Returns\n<p>Log notes.\n"],["getNotify","Projects::Model::Document","Projects/Model/Document.html#method-i-getNotify","()","<p>Get the notify for the document.\n\n<p>Returns\n<p>Notify for the document.\n"],["getNotify","Projects::Model::Forum","Projects/Model/Forum.html#method-i-getNotify","()","<p>Get the notify of the forum.\n\n<p>Returns\n<p>notify of the forum.\n"],["getOccurred","Projects::Model::Event","Projects/Model/Event.html#method-i-getOccurred","()","<p>Get no of times occurred for the reminder.\n\n<p>Returns\n<p>No of times the reminder has occurred.\n"],["getOccurrences","Projects::Model::Event","Projects/Model/Event.html#method-i-getOccurrences","()","<p>Get the occurrences for the reminder.\n\n<p>Returns\n<p>Number of occurences of the reminder.\n"],["getOpenBugCount","Projects::Model::Project","Projects/Model/Project.html#method-i-getOpenBugCount","()","<p>Get the open bug count.\n\n<p>Returns\n<p>Open bug count for the project.\n"],["getOpenMilestoneCount","Projects::Model::Project","Projects/Model/Project.html#method-i-getOpenMilestoneCount","()","<p>Get the open milestone count.\n\n<p>Returns\n<p>Open milestone count for the project.\n"],["getOpenTaskCount","Projects::Model::Project","Projects/Model/Project.html#method-i-getOpenTaskCount","()","<p>Get the open task count.\n\n<p>Returns\n<p>Open task count for the project.\n"],["getOwnerId","Projects::Model::Log","Projects/Model/Log.html#method-i-getOwnerId","()","<p>Get the owner id.\n\n<p>Returns\n<p>Owner id.\n"],["getOwnerId","Projects::Model::Milestone","Projects/Model/Milestone.html#method-i-getOwnerId","()","<p>Get the owner id.\n\n<p>Returns\n<p>Owner id.\n"],["getOwnerId","Projects::Model::Project","Projects/Model/Project.html#method-i-getOwnerId","()","<p>Get the owner id.\n\n<p>Returns\n<p>Owner id.\n"],["getOwnerName","Projects::Model::Log","Projects/Model/Log.html#method-i-getOwnerName","()","<p>Get the owner name.\n\n<p>Returns\n<p>Owner name.\n"],["getOwnerName","Projects::Model::Milestone","Projects/Model/Milestone.html#method-i-getOwnerName","()","<p>Get the owner name.\n\n<p>Returns\n<p>Owner name.\n"],["getOwnerName","Projects::Model::Project","Projects/Model/Project.html#method-i-getOwnerName","()","<p>Get the owner name.\n\n<p>Returns\n<p>The owner name.\n"],["getOwners","Projects::Model::Task","Projects/Model/Task.html#method-i-getOwners","()","<p>Get the owner of the task.\n\n<p>Returns\n<p>List of Owner object.\n"],["getParticipantId","Projects::Model::Participant","Projects/Model/Participant.html#method-i-getParticipantId","()","<p>Get the participant id.\n\n<p>Returns\n<p>Participant id.\n"],["getParticipantPerson","Projects::Model::Participant","Projects/Model/Participant.html#method-i-getParticipantPerson","()","<p>Get the participant name.\n\n<p>Returns\n<p>Participant name.\n"],["getParticipants","Projects::Model::Event","Projects/Model/Event.html#method-i-getParticipants","()","<p>Get the participants.\n\n<p>Returns\n<p>List of Participant object.\n"],["getPercentComplete","Projects::Model::Task","Projects/Model/Task.html#method-i-getPercentComplete","()","<p>Get the task completed percent.\n\n<p>Returns\n<p>Task complete percent.\n"],["getPortal","Projects::Parser::PortalParser","Projects/Parser/PortalParser.html#method-i-getPortal","(jsonObject)","<p>Parse the JSONObject into Portal object.\n\n<p>Parameters\n<p><p>jsonObject &mdash; <p>JSONObject contains the details of a Portal ...\n"],["getPortals","Projects::Api::PortalAPI","Projects/Api/PortalAPI.html#method-i-getPortals","()","<p>Parse the JSON response into respective objects.\n<p>Get list of portals.\n\n<p>Returns\n"],["getPortals","Projects::Parser::PortalParser","Projects/Parser/PortalParser.html#method-i-getPortals","(response)","<p>Parse the JSON response and make it into List of Portal object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response ...\n"],["getPortalsAPI","Projects::Service::ZohoProjects","Projects/Service/ZohoProjects.html#method-i-getPortalsAPI","()","<p>Get an instance of portals API.\n\n<p>Returns\n<p>PortalsAPI object.\n"],["getPostDate","Projects::Model::Comment","Projects/Model/Comment.html#method-i-getPostDate","()","<p>Get the comment posted date.\n\n<p>Returns\n<p>Date at which comment is posted.\n"],["getPostDate","Projects::Model::Forum","Projects/Model/Forum.html#method-i-getPostDate","()","<p>Get the post date of the forum.\n\n<p>Returns\n<p>Post date in the forum.\n"],["getPostDateFormat","Projects::Model::Comment","Projects/Model/Comment.html#method-i-getPostDateFormat","()","<p>Get the comment posted date format.\n\n<p>Returns\n<p>Date format of the posted comment.\n"],["getPostDateFormat","Projects::Model::Forum","Projects/Model/Forum.html#method-i-getPostDateFormat","()","<p>Get the date format of the post in the forum.\n\n<p>Returns\n<p>Date format of the post in the forum.\n"],["getPostDateLong","Projects::Model::Comment","Projects/Model/Comment.html#method-i-getPostDateLong","()","<p>Get the comment posted date long.\n\n<p>Returns\n<p>The date on which the comment is posted.\n"],["getPostDateLong","Projects::Model::Forum","Projects/Model/Forum.html#method-i-getPostDateLong","()","<p>Get the date of the post in forum.\n\n<p>Returns\n<p>Date of the post in the forum.\n"],["getPostedBy","Projects::Model::Comment","Projects/Model/Comment.html#method-i-getPostedBy","()","<p>Get the comment posted person id.\n\n<p>Returns\n<p>Id of the person who posted the comment.\n"],["getPostedBy","Projects::Model::Forum","Projects/Model/Forum.html#method-i-getPostedBy","()","<p>Get the id of the posted User.\n\n<p>Returns\n<p>User id.\n"],["getPostedBy","Projects::Model::Status","Projects/Model/Status.html#method-i-getPostedBy","()","<p>Get the status posted person id.\n\n<p>Returns\n<p>Id of the person who posted the status.\n"],["getPostedPerson","Projects::Model::Comment","Projects/Model/Comment.html#method-i-getPostedPerson","()","<p>Get the comment posted person.\n\n<p>Returns\n<p>Person who posted the comment.\n"],["getPostedPerson","Projects::Model::Forum","Projects/Model/Forum.html#method-i-getPostedPerson","()","<p>Get the posted User name.\n\n<p>Returns\n<p>posted User name.\n"],["getPostedPerson","Projects::Model::Status","Projects/Model/Status.html#method-i-getPostedPerson","()","<p>Get the status posted person name.\n\n<p>Returns\n<p>Name of the person who posted the status.\n"],["getPostedTime","Projects::Model::Status","Projects/Model/Status.html#method-i-getPostedTime","()","<p>Get the status posted time.\n\n<p>Returns\n<p>Status poted time.\n"],["getPostedTimeFormat","Projects::Model::Status","Projects/Model/Status.html#method-i-getPostedTimeFormat","()","<p>Get the status posted time format.\n\n<p>Returns\n<p>status posted time format.\n"],["getPostedTimeLong","Projects::Model::Status","Projects/Model/Status.html#method-i-getPostedTimeLong","()","<p>Get the status posted time long.\n\n<p>Returns\n<p>status posted time long.\n"],["getPriority","Projects::Model::Task","Projects/Model/Task.html#method-i-getPriority","()","<p>Get the priority of the task.\n\n<p>Returns\n<p>Task priority.\n"],["getProject","Projects::Parser::ProjectParser","Projects/Parser/ProjectParser.html#method-i-getProject","(project)","<p>Parse the JSON response and make it into Project object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response contains ...\n"],["getProjectActivities","Projects::Api::ProjectsAPI","Projects/Api/ProjectsAPI.html#method-i-getProjectActivities","(projectId, queryMap=nil)","<p>Get list of project activities.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["getProjectId","Projects::Model::Bug","Projects/Model/Bug.html#method-i-getProjectId","()","<p>get the project id.\n\n<p>Returns\n<p>Project id.\n"],["getProjectId","Projects::Model::Log","Projects/Model/Log.html#method-i-getProjectId","()","<p>Get the project id.\n\n<p>Returns\n<p>Project id.\n"],["getProjectName","Projects::Model::Log","Projects/Model/Log.html#method-i-getProjectName","()","<p>Get the project name.\n\n<p>Returns\n<p>Project name.\n"],["getProjectStatuses","Projects::Api::ProjectsAPI","Projects/Api/ProjectsAPI.html#method-i-getProjectStatuses","(projectId,queryMap=nil)","<p>Get list of project statuses.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["getProjectURL","Projects::Model::Portal","Projects/Model/Portal.html#method-i-getProjectURL","()","<p>Get the project URL.\n\n<p>Returns\n<p>Project URL.\n"],["getProjectUrl","Projects::Api::ProjectsAPI","Projects/Api/ProjectsAPI.html#method-i-getProjectUrl","(projectId)","<p>Get specific Project url by specifying the projectId.\n\n<p>Returns\n<p>String Object\n"],["getProjects","Projects::Api::ProjectsAPI","Projects/Api/ProjectsAPI.html#method-i-getProjects","(queryMap=nil)","<p>Get list of projects.\n\n<p>Parameters\n<p><p>queryMap &mdash; <p>This queryMap contains the filters in the form of key-value pair. ...\n"],["getProjects","Projects::Parser::ProjectParser","Projects/Parser/ProjectParser.html#method-i-getProjects","(response)","<p>Parse the JSON response and make it into List of Project object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response ...\n"],["getProjectsAPI","Projects::Service::ZohoProjects","Projects/Service/ZohoProjects.html#method-i-getProjectsAPI","()","<p>Get an instance of projects API.\n\n<p>Returns\n<p>ProjectsAPI object.\n"],["getProjectsUrl","Projects::Api::ProjectsAPI","Projects/Api/ProjectsAPI.html#method-i-getProjectsUrl","()","<p>Get the genearal url for getting all Projects.\n\n<p>Returns\n<p>String Object\n"],["getQueryMap","Projects::Api::API","Projects/Api/API.html#method-i-getQueryMap","(queryMap=nil)","<p>Creates a query map using User's authToken and filters.\n\n<p>Returns\n<p>HashMap.\n"],["getReminder","Projects::Model::Event","Projects/Model/Event.html#method-i-getReminder","()","<p>Get the reminder for the event.\n\n<p>Returns\n<p>event reminder.\n"],["getRepeat","Projects::Model::Event","Projects/Model/Event.html#method-i-getRepeat","()","<p>Get the reminder repeat for the event.\n\n<p>Returns\n<p>event reminder repeat.\n"],["getReportedPerson","Projects::Model::Bug","Projects/Model/Bug.html#method-i-getReportedPerson","()","<p>Get the reported person.\n\n<p>Returns\n<p>Person who reported the bug.\n"],["getReporterId","Projects::Model::Bug","Projects/Model/Bug.html#method-i-getReporterId","()","<p>Get the reporter id.\n\n<p>Returns\n<p>Reporter id.\n"],["getReproducibleId","Projects::Model::Bug","Projects/Model/Bug.html#method-i-getReproducibleId","()","<p>Get the reproducible id.\n\n<p>Returns\n<p>Reproducible id of the bug.\n"],["getReproducibleType","Projects::Model::Bug","Projects/Model/Bug.html#method-i-getReproducibleType","()","<p>Get the reproducible type.\n\n<p>Returns\n<p>Reproducible type of the bug.\n"],["getResult","Projects::Parser::BugParser","Projects/Parser/BugParser.html#method-i-getResult","(response)","<p>Parse the JSON response and get the success message.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response contains the ...\n"],["getResult","Projects::Parser::DocumentParser","Projects/Parser/DocumentParser.html#method-i-getResult","(response)","<p>Parse the JSON response and get the success message.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response contains the ...\n"],["getResult","Projects::Parser::EventParser","Projects/Parser/EventParser.html#method-i-getResult","(response)","<p>Parse the JSON response and get the success message.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response contains the ...\n"],["getResult","Projects::Parser::FolderParser","Projects/Parser/FolderParser.html#method-i-getResult","(response)","<p>Parse the JSON response and get the success message.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response contains the ...\n"],["getResult","Projects::Parser::ForumParser","Projects/Parser/ForumParser.html#method-i-getResult","(response)","<p>Parse the JSON response and get the success message.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response contains the ...\n"],["getResult","Projects::Parser::MilestonesParser","Projects/Parser/MilestonesParser.html#method-i-getResult","(response)","<p>Parse the JSON response and get the success message.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response contains the ...\n"],["getResult","Projects::Parser::ProjectParser","Projects/Parser/ProjectParser.html#method-i-getResult","(response)","<p>Parse the JSON response and get the success message.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response contains the ...\n"],["getResult","Projects::Parser::TaskParser","Projects/Parser/TaskParser.html#method-i-getResult","(response)","<p>Parse the JSON response and get the success message.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response contains the ...\n"],["getResult","Projects::Parser::TasklistParser","Projects/Parser/TasklistParser.html#method-i-getResult","(response)","<p>Parse the JSON response and get the success message.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response contains the ...\n"],["getResult","Projects::Parser::TimesheetParser","Projects/Parser/TimesheetParser.html#method-i-getResult","(response)","<p>Parse the JSON response and get the success message.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response contains the ...\n"],["getResult","Projects::Util::ZohoHTTPClient","Projects/Util/ZohoHTTPClient.html#method-c-getResult","(response)","<p>Evaluates the response\n\n<p>Parameters\n<p><p>response &mdash; <p>The response of the HTTP request\n"],["getRole","Projects::Model::Portal","Projects/Model/Portal.html#method-i-getRole","()","<p>Get the role.\n\n<p>Returns\n<p>Role of the person.\n"],["getRole","Projects::Model::TimelogList","Projects/Model/TimelogList.html#method-i-getRole","()","<p>Get the time log role.\n\n<p>Returns\n<p>The time log role.\n"],["getRole","Projects::Model::User","Projects/Model/User.html#method-i-getRole","()","<p>Get the user role.\n\n<p>Returns\n<p>user role.\n"],["getScheduledOn","Projects::Model::Event","Projects/Model/Event.html#method-i-getScheduledOn","()","<p>Get the event scheduled on.\n\n<p>Returns\n<p>Event scheduled time.\n"],["getScheduledOnLong","Projects::Model::Event","Projects/Model/Event.html#method-i-getScheduledOnLong","()","<p>Get the event scheduled on long.\n\n<p>Returns\n<p>Event scheduled on long.\n"],["getSequence","Projects::Model::Tasklist","Projects/Model/Tasklist.html#method-i-getSequence","()","<p>Get the sequence of the task list.\n\n<p>Returns\n<p>Sequence of the task list.\n"],["getSeverityId","Projects::Model::Bug","Projects/Model/Bug.html#method-i-getSeverityId","()","<p>Get the severity id.\n\n<p>Returns\n<p>Severity id.\n"],["getSeverityType","Projects::Model::Bug","Projects/Model/Bug.html#method-i-getSeverityType","()","<p>Get the severity type.\n\n<p>Returns\n<p>Severity type.\n"],["getStartDate","Projects::Model::Milestone","Projects/Model/Milestone.html#method-i-getStartDate","()","<p>Get the start date of the milestone.\n\n<p>Returns\n<p>Start date of the milestone.\n"],["getStartDate","Projects::Model::Task","Projects/Model/Task.html#method-i-getStartDate","()","<p>Get the task start date.\n\n<p>Returns\n<p>Task start date.\n"],["getStartDateFormat","Projects::Model::Milestone","Projects/Model/Milestone.html#method-i-getStartDateFormat","()","<p>Get the start date format.\n\n<p>Returns\n<p>Start date format.\n"],["getStartDateFormat","Projects::Model::Task","Projects/Model/Task.html#method-i-getStartDateFormat","()","<p>Get the task start date format.\n\n<p>Returns\n<p>Task start date format.\n"],["getStartDateLong","Projects::Model::Milestone","Projects/Model/Milestone.html#method-i-getStartDateLong","()","<p>Get the start date.\n\n<p>Returns\n<p>Start date.\n"],["getStartDateLong","Projects::Model::Task","Projects/Model/Task.html#method-i-getStartDateLong","()","<p>Get the start date long.\n\n<p>Returns\n<p>Task start date long.\n"],["getState","Projects::Model::Activity","Projects/Model/Activity.html#method-i-getState","()","<p>Get the activity state.\n\n<p>Returns\n<p>Activity state.\n"],["getStatus","Projects::Model::Milestone","Projects/Model/Milestone.html#method-i-getStatus","()","<p>Get the status of the milestone.\n\n<p>Returns\n<p>Milestone status.\n"],["getStatus","Projects::Model::Project","Projects/Model/Project.html#method-i-getStatus","()","<p>Get the project status.\n\n<p>Returns\n<p>Project status.\n"],["getStatus","Projects::Model::Tasklist","Projects/Model/Tasklist.html#method-i-getStatus","()","<p>Get the status of the task list.\n\n<p>Returns\n<p>Status of the task list.\n"],["getStatus","Projects::Parser::ProjectParser","Projects/Parser/ProjectParser.html#method-i-getStatus","(response)","<p>Parse the JSON response and make it into Status object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response contains ...\n"],["getStatusId","Projects::Model::Bug","Projects/Model/Bug.html#method-i-getStatusId","()","<p>Get the status id.\n\n<p>Returns\n<p>Status id.\n"],["getStatusType","Projects::Model::Bug","Projects/Model/Bug.html#method-i-getStatusType","()","<p>Get the status type.\n\n<p>Returns\n<p>Status type.\n"],["getStatusURL","Projects::Model::Milestone","Projects/Model/Milestone.html#method-i-getStatusURL","()","<p>Get the status URL.\n<p>status URL for the milestone.\n\n"],["getStatusURL","Projects::Model::Project","Projects/Model/Project.html#method-i-getStatusURL","()","<p>Get the status URL.\n\n<p>Returns\n<p>Status URL.\n"],["getStatuses","Projects::Parser::ProjectParser","Projects/Parser/ProjectParser.html#method-i-getStatuses","(response)","<p>Parse the JSON response and make it into List of Status object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response ...\n"],["getSubtasks","Projects::Model::Task","Projects/Model/Task.html#method-i-getSubtasks","()","<p>Get the subtasks of the task.\n\n<p>Returns\n<p>List of Task object.\n"],["getTags","Projects::Model::Document","Projects/Model/Document.html#method-i-getTags","()","<p>Get the tags for the document.\n\n<p>Returns\n<p>Tags for the document.\n"],["getTask","Projects::Parser::TaskParser","Projects/Parser/TaskParser.html#method-i-getTask","(response)","<p>Parse the JSON response and make it into Task object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response contains the ...\n"],["getTaskId","Projects::Model::Tasklog","Projects/Model/Tasklog.html#method-i-getTaskId","()","<p>Get the task id.\n\n<p>Returns\n<p>ID of the task.\n"],["getTaskName","Projects::Model::Tasklog","Projects/Model/Tasklog.html#method-i-getTaskName","()","<p>Get the task name.\n\n<p>Returns\n<p>Task name.\n"],["getTaskURL","Projects::Model::Project","Projects/Model/Project.html#method-i-getTaskURL","()","<p>Get the task URL.\n\n<p>Returns\n<p>task URL.\n"],["getTaskURL","Projects::Model::Tasklist","Projects/Model/Tasklist.html#method-i-getTaskURL","()","<p>Get the task URL.\n\n<p>Returns\n<p>Task URL.\n"],["getTasklist","Projects::Model::Task","Projects/Model/Task.html#method-i-getTasklist","()","<p>Get the tasklist of the task.\n\n<p>Returns\n<p>Tasklist object.\n"],["getTasklist","Projects::Parser::TasklistParser","Projects/Parser/TasklistParser.html#method-i-getTasklist","(response)","<p>Parse the JSON response and make it into Tasklist object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response contains ...\n"],["getTasklistTasks","Projects::Api::TasksAPI","Projects/Api/TasksAPI.html#method-i-getTasklistTasks","(projectId, tasklistId, queryMap)","<p>Get list of tasks for the task list.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["getTasklistURL","Projects::Model::Project","Projects/Model/Project.html#method-i-getTasklistURL","()","<p>Get the task list URL.\n\n<p>Returns\n<p>Task list URL.\n"],["getTasklists","Projects::Api::TasklistsAPI","Projects/Api/TasklistsAPI.html#method-i-getTasklists","(projectId,queryMap)","<p>Get list of tasklists for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["getTasklists","Projects::Parser::TasklistParser","Projects/Parser/TasklistParser.html#method-i-getTasklists","(response)","<p>Parse the JSON response and make it into List of Tasklist object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response ...\n"],["getTasklistsAPI","Projects::Service::ZohoProjects","Projects/Service/ZohoProjects.html#method-i-getTasklistsAPI","()","<p>Get an instance of task lists API.\n\n<p>Returns\n<p>TasklistsAPI object.\n"],["getTasklog","Projects::Parser::TimesheetParser","Projects/Parser/TimesheetParser.html#method-i-getTasklog","(response)","<p>Parse the JSON response and make it into Tasklog object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response contains ...\n"],["getTasklogs","Projects::Model::Timelog","Projects/Model/Timelog.html#method-i-getTasklogs","()","<p>Get the task logs.\n\n<p>Returns\n<p>List of Tasklog object.\n"],["getTasks","Projects::Api::TasksAPI","Projects/Api/TasksAPI.html#method-i-getTasks","(projectId, queryMap)","<p>Get list of tasks for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["getTasks","Projects::Parser::TaskParser","Projects/Parser/TaskParser.html#method-i-getTasks","(response)","<p>Parse the JSON response and make it into List of Task object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response contains ...\n"],["getTasksAPI","Projects::Service::ZohoProjects","Projects/Service/ZohoProjects.html#method-i-getTasksAPI","()","<p>Get an instance of tasks API.\n\n<p>Returns\n<p>TasksAPI object.\n"],["getTilte","Projects::Model::Event","Projects/Model/Event.html#method-i-getTilte","()","<p>Get the event title.\n\n<p>Returns\n<p>Event title.\n"],["getTime","Projects::Model::Activity","Projects/Model/Activity.html#method-i-getTime","()","<p>Get the time for the activity done.\n\n<p>Returns\n<p>Time for the activity done.\n"],["getTimeLogs","Projects::Api::TimesheetsAPI","Projects/Api/TimesheetsAPI.html#method-i-getTimeLogs","(projectId, queryMap)","<p>Get list of time logs for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID 0f the project.\n"],["getTimeLogs","Projects::Parser::TimesheetParser","Projects/Parser/TimesheetParser.html#method-i-getTimeLogs","(response)","<p>Parse the JSON response and make it into TimelogList object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response contains ...\n"],["getTimeLong","Projects::Model::Activity","Projects/Model/Activity.html#method-i-getTimeLong","()","<p>Get the time long.\n\n<p>Returns\n<p>Time for the activity.\n"],["getTimeZone","Projects::Model::Portal","Projects/Model/Portal.html#method-i-getTimeZone","()","<p>Get the time zone.\n\n<p>Returns\n<p>Time zone for the portal.\n"],["getTimesheetURL","Projects::Model::Bug","Projects/Model/Bug.html#method-i-getTimesheetURL","()","<p>Get the time sheet URL.\n\n<p>Returns\n<p>Time sheet URL.\n"],["getTimesheetURL","Projects::Model::Project","Projects/Model/Project.html#method-i-getTimesheetURL","()","<p>Get the time sheet URL.\n\n<p>Returns\n<p>Time sheet URL.\n"],["getTimesheetURL","Projects::Model::Task","Projects/Model/Task.html#method-i-getTimesheetURL","()","<p>Get the time sheet URL.\n\n<p>Returns\n<p>Time sheet URL.\n"],["getTimesheetsAPI","Projects::Service::ZohoProjects","Projects/Service/ZohoProjects.html#method-i-getTimesheetsAPI","()","<p>Get an instance of time sheets API.\n\n<p>Returns\n<p>TimesheetsAPI object.\n"],["getTitle","Projects::Model::Bug","Projects/Model/Bug.html#method-i-getTitle","()","<p>Get the bug title.\n\n<p>Returns\n<p>Bug title.\n"],["getTitle","Projects::Model::Buglog","Projects/Model/Buglog.html#method-i-getTitle","()","<p>Get the title of the bug.\n\n<p>Returns\n<p>Title of the bug.\n"],["getTotalHours","Projects::Model::Timelog","Projects/Model/Timelog.html#method-i-getTotalHours","()","<p>Get the total hours of the time log.\n\n<p>Returns\n<p>total hours of the time log.\n"],["getTotalMinutes","Projects::Model::Log","Projects/Model/Log.html#method-i-getTotalMinutes","()","<p>Get the total time in minutes for the log.\n\n<p>Returns\n<p>Total time in minutes for the log.\n"],["getURL","Projects::Model::Bug","Projects/Model/Bug.html#method-i-getURL","()","<p>Get the bug URL.\n\n<p>Returns\n<p>Bug URL.\n"],["getURL","Projects::Model::Document","Projects/Model/Document.html#method-i-getURL","()","<p>Get the document URL.\n\n<p>Returns\n<p>Document URL.\n"],["getURL","Projects::Model::Folder","Projects/Model/Folder.html#method-i-getURL","()","<p>Get the folder URL.\n\n<p>Returns\n<p>Folder URL.\n"],["getURL","Projects::Model::Forum","Projects/Model/Forum.html#method-i-getURL","()","<p>Get the forum URL.\n\n<p>Returns\n<p>Forum URL.\n"],["getURL","Projects::Model::Log","Projects/Model/Log.html#method-i-getURL","()","<p>Get the URL.\n\n<p>Returns\n<p>Log URL.\n"],["getURL","Projects::Model::Milestone","Projects/Model/Milestone.html#method-i-getURL","()","<p>Get the milestone URL.\n\n<p>Returns\n<p>Milestone URL.\n"],["getURL","Projects::Model::Project","Projects/Model/Project.html#method-i-getURL","()","<p>Get the project URL.\n\n<p>Returns\n<p>Project URL.\n"],["getURL","Projects::Model::Task","Projects/Model/Task.html#method-i-getURL","()","<p>Get the task URL.\n\n<p>Returns\n<p>Task URL.\n"],["getURL","Projects::Model::Tasklist","Projects/Model/Tasklist.html#method-i-getURL","()","<p>Get the task list URL.\n\n<p>Returns\n<p>Task list URL.\n"],["getUpdatedBy","Projects::Model::Comment","Projects/Model/Comment.html#method-i-getUpdatedBy","()","<p>Get the comment updated person id.\n\n<p>Returns\n<p>Id of the person who updated the comment.\n"],["getUploaddoc","Projects::Model::Document","Projects/Model/Document.html#method-i-getUploaddoc","()","<p>Get the upload document file.\n\n<p>Returns\n<p>ArrayList of upload document file.\n"],["getUploadedBy","Projects::Model::Version","Projects/Model/Version.html#method-i-getUploadedBy","()","<p>Get the id of the person who has uploaded.\n\n<p>Returns\n<p>Id of the user who has uploaded.\n"],["getUploadedDate","Projects::Model::Version","Projects/Model/Version.html#method-i-getUploadedDate","()","<p>Get the uploaded date.\n\n<p>Returns\n<p>Uploaded date.\n"],["getUploadedDateFormat","Projects::Model::Version","Projects/Model/Version.html#method-i-getUploadedDateFormat","()","<p>Get the uploaded date format.\n\n<p>Returns\n<p>Uploaded date format.\n"],["getUploadedDateLong","Projects::Model::Version","Projects/Model/Version.html#method-i-getUploadedDateLong","()","<p>Get the document uploaded date long.\n\n<p>Returns\n<p>document uploaded date long.\n"],["getUploadedOn","Projects::Model::Version","Projects/Model/Version.html#method-i-getUploadedOn","()","<p>Get when the document was uploaded on.\n\n<p>Returns\n<p>Time of uploading the document.\n"],["getUploadfile","Projects::Model::Forum","Projects/Model/Forum.html#method-i-getUploadfile","()","<p>Get the uploaded file list.\n\n<p>Returns\n<p>ArrayList of uploaded file for the post in the forum.\n"],["getUrl","Projects::Util::ZohoHTTPClient","Projects/Util/ZohoHTTPClient.html#method-c-getUrl","(url,queryMap)","<p>Returns the url string for making the request.\n\n<p>Parameters\n<p><p>url &mdash; <p>Service URL passed by the user.\n"],["getUserURL","Projects::Model::Project","Projects/Model/Project.html#method-i-getUserURL","()","<p>Get the user URL.\n\n<p>Returns\n<p>user URL.\n"],["getUsers","Projects::Api::UsersAPI","Projects/Api/UsersAPI.html#method-i-getUsers","(projectId)","<p>Get list of users for the project.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["getUsers","Projects::Parser::UserParser","Projects/Parser/UserParser.html#method-i-getUsers","(response)","<p>Parse the JSON response and make it into List of User object.\n\n<p>Parameters\n<p><p>response &mdash; <p>This JSON response contains ...\n"],["getUsersAPI","Projects::Service::ZohoProjects","Projects/Service/ZohoProjects.html#method-i-getUsersAPI","()","<p>Get an instance of users API.\n\n<p>Returns\n<p>UsersAPI object.\n"],["getVersion","Projects::Model::Version","Projects/Model/Version.html#method-i-getVersion","()","<p>Get the version.\n\n<p>Returns\n<p>Document version.\n"],["getVersions","Projects::Model::Document","Projects/Model/Document.html#method-i-getVersions","()","<p>Get the document version.\n\n<p>Returns\n<p>Document version.\n"],["getWebsiteURL","Projects::Model::Portal","Projects/Model/Portal.html#method-i-getWebsiteURL","()","<p>Get the Website URL.\n\n<p>Returns\n<p>Website URL.\n"],["isClosed","Projects::Model::Bug","Projects/Model/Bug.html#method-i-isClosed","()","<p>Get the bug is closed or not.\n\n<p>Returns\n<p>true, if the big is closed else returns false.\n"],["isCompleted","Projects::Model::Task","Projects/Model/Task.html#method-i-isCompleted","()","<p>Get whether the task is completed or not.\n\n<p>Returns\n<p>true, if the task is completed else false.\n"],["isCompleted","Projects::Model::Tasklist","Projects/Model/Tasklist.html#method-i-isCompleted","()","<p>Get whether the task list is completed or not.\n\n<p>Returns\n<p>true, if the task list is completed else returns ...\n"],["isDefault","Projects::Model::Portal","Projects/Model/Portal.html#method-i-isDefault","()","<p>Get whether portal is default portal or not.\n\n<p>Returns\n<p>true, if the portal is a default portal else false. ...\n"],["isRolled","Projects::Model::Tasklist","Projects/Model/Tasklist.html#method-i-isRolled","()","<p>Get whether the task list rolled or not.\n\n<p>Returns\n<p>true, if the task list is rolled else returns false.\n"],["jsonToActivity","Projects::Parser::ProjectParser","Projects/Parser/ProjectParser.html#method-i-jsonToActivity","(jsonObject)","<p>Parse the JSONObject into Activity object.\n\n<p>Parameters\n<p><p>jsonObject &mdash; <p>JSONObject contains the details of a activity. ...\n"],["jsonToBug","Projects::Parser::BugParser","Projects/Parser/BugParser.html#method-i-jsonToBug","(jsonObject)","<p>Parse the JSONObject into Bug object.\n\n<p>Parameters\n<p><p>jsonObject &mdash; <p>JSONObject contains the details of a bug.\n"],["jsonToBuglog","Projects::Parser::TimesheetParser","Projects/Parser/TimesheetParser.html#method-i-jsonToBuglog","(jsonObject)","<p>Parse the JSONObject into Buglog object.\n\n<p>Parameters\n<p><p>jsonObject &mdash; <p>JSONObject contains the details of a bug ...\n"],["jsonToCategory","Projects::Parser::ForumParser","Projects/Parser/ForumParser.html#method-i-jsonToCategory","(jsonObject)","<p>Parse the JSONObject into Category object.\n<p><p>jsonObject &mdash; <p>JSONObject contains the details of a category.\n\n\n\n<p>Returns ...\n"],["jsonToComment","Projects::Parser::ForumParser","Projects/Parser/ForumParser.html#method-i-jsonToComment","(jsonObject)","<p>Parse the JSONObject into Comment object.\n\n<p>Parameters\n<p><p>jsonObject &mdash; <p>JSONObject contains the details of a comment. ...\n"],["jsonToComment","Projects::Parser::TaskParser","Projects/Parser/TaskParser.html#method-i-jsonToComment","(jsonObject)","<p>Parse the JSONObject into Comment object.\n\n<p>Parameters\n<p><p>jsonObject &mdash; <p>JSONObject contains the details of a comment. ...\n"],["jsonToDocument","Projects::Parser::DocumentParser","Projects/Parser/DocumentParser.html#method-i-jsonToDocument","(jsonObject)","<p>Parse the JSONObject into Document object.\n\n<p>Parameters\n<p><p>jsonObject &mdash; <p>JSONObject contains the details of the ...\n"],["jsonToEvent","Projects::Parser::EventParser","Projects/Parser/EventParser.html#method-i-jsonToEvent","(jsonObject)","<p>Parse the JSONObject into Event object.\n\n<p>Parameters\n<p><p>jsonObject &mdash; <p>JSONObject contains the details of an event. ...\n"],["jsonToFolder","Projects::Parser::DocumentParser","Projects/Parser/DocumentParser.html#method-i-jsonToFolder","(jsonObject)","<p>Parse the JSONObject into Folder object.\n\n<p>Parameters\n<p><p>jsonObject &mdash; <p>JSONObject contains the details of a folder. ...\n"],["jsonToFolder","Projects::Parser::FolderParser","Projects/Parser/FolderParser.html#method-i-jsonToFolder","(jsonObject)","<p>Parse the JSONObject into Folder object.\n\n<p>Parameters\n<p><p>jsonObject &mdash; <p>JSONObject contains the details of a folder. ...\n"],["jsonToForum","Projects::Parser::ForumParser","Projects/Parser/ForumParser.html#method-i-jsonToForum","(jsonObject)","<p>Parse the JSONObject into Forum object.\n\n<p>Parameters\n<p><p>jsonObject &mdash; <p>JSONObject contains the details of a forum. ...\n"],["jsonToGenerallog","Projects::Parser::TimesheetParser","Projects/Parser/TimesheetParser.html#method-i-jsonToGenerallog","(jsonObject)","<p>Parse the JSONObject into Generallog object.\n\n<p>Parameters\n<p><p>jsonObject &mdash; <p>JSONObject contains the details of a ...\n"],["jsonToMilestone","Projects::Parser::MilestonesParser","Projects/Parser/MilestonesParser.html#method-i-jsonToMilestone","(jsonObject)","<p>Parse the JSONObject into Milestone object.\n\n<p>Parameters\n<p><p>jsonObject &mdash; <p>JSONObject contains the details of a ...\n"],["jsonToOwner","Projects::Parser::TaskParser","Projects/Parser/TaskParser.html#method-i-jsonToOwner","(jsonObject)","<p>Parse the JSONObject into Owner object.\n\n<p>Parameters\n<p><p>jsonObject &mdash; <p>JSONObject contains the details of a owner. ...\n"],["jsonToParticipant","Projects::Parser::EventParser","Projects/Parser/EventParser.html#method-i-jsonToParticipant","(jsonObject)","<p>Parse the JSONObject into Participant object.\n\n<p>Parameters\n<p><p>jsonObject &mdash; <p>JSONObject contains the details of ...\n"],["jsonToProject","Projects::Parser::ProjectParser","Projects/Parser/ProjectParser.html#method-i-jsonToProject","(jsonObject)","<p>Parse the JSONObject into Project object.\n\n<p>Parameters\n<p><p>jsonObject &mdash; <p>JSONObject contains the details of a project. ...\n"],["jsonToStatus","Projects::Parser::ProjectParser","Projects/Parser/ProjectParser.html#method-i-jsonToStatus","(jsonObject)","<p>Parse the JSONObject into Status object.\n<p><p>jsonObject &mdash; <p>JSONObject contains the details of a status.\n\n\n\n<p>Returns ...\n"],["jsonToTask","Projects::Parser::TaskParser","Projects/Parser/TaskParser.html#method-i-jsonToTask","(jsonObject)","<p>Parse the JSONObject into Task object.\n\n<p>Parameters\n<p><p>jsonObject &mdash; <p>JSONObject contains the details of a task. ...\n"],["jsonToTasklist","Projects::Parser::TaskParser","Projects/Parser/TaskParser.html#method-i-jsonToTasklist","(jsonObject)","<p>Parse the JSONObject into Tasklist object.\n\n<p>Parameters\n<p><p>jsonObject &mdash; <p>JSONObject contains the details of a task ...\n"],["jsonToTasklist","Projects::Parser::TasklistParser","Projects/Parser/TasklistParser.html#method-i-jsonToTasklist","(jsonObject)","<p>Parse the JSONObject into Tasklist object.\n\n<p>Parameters\n<p><p>jsonObject &mdash; <p>JSONObject contains the details of a task ...\n"],["jsonToTasklog","Projects::Parser::TimesheetParser","Projects/Parser/TimesheetParser.html#method-i-jsonToTasklog","(jsonObject)","<p>Parse the JSONObject into Tasklog object.\n\n<p>Parameters\n<p><p>jsonObject &mdash; <p>JSONObject contains the details of a task ...\n"],["jsonToTimelogList","Projects::Parser::TimesheetParser","Projects/Parser/TimesheetParser.html#method-i-jsonToTimelogList","(jsonObject)","<p>Parse the JSONObject into timlogList object.\n\n<p>Parameters\n<p><p>jsonObject &mdash; <p>JSONObject contains the details of a ...\n"],["jsonToUser","Projects::Parser::UserParser","Projects/Parser/UserParser.html#method-i-jsonToUser","(jsonObject)","<p>Parse the JSONObject into User object.\n\n<p>Parameters\n<p><p>response &mdash; <p>JSONObject contains the details of a user.\n"],["jsonToVersion","Projects::Parser::DocumentParser","Projects/Parser/DocumentParser.html#method-i-jsonToVersion","(jsonObject)","<p>Parse the JSONObject into Version object.\n\n<p>Parameters\n<p><p>jsonObject &mdash; <p>JSONObject contains the details of a version. ...\n"],["new","Projects::Api::API","Projects/Api/API.html#method-c-new","(authToken, portalId)","<p>Construct a new API using User's authToken and portalId.\n\n<p>Parameters\n<p><p>authToken &mdash; <p>User's authToken.\n"],["new","Projects::Api::BugsAPI","Projects/Api/BugsAPI.html#method-c-new","(authToken,portalId)","<p>Construct a BugsAPI using User's authToken and portalId.\n\n<p>Parameters\n<p><p>authToken &mdash; <p>User's authToken.\n"],["new","Projects::Api::DocumentsAPI","Projects/Api/DocumentsAPI.html#method-c-new","(authToken,portalId)","<p>Construct a new DocumentsAPI using User's authToken and portalId.\n\n<p>Parameters\n<p><p>authToken &mdash; <p>User's authToken ...\n"],["new","Projects::Api::EventsAPI","Projects/Api/EventsAPI.html#method-c-new","(authToken,portalId)","<p>Construct a new EventsAPI using User's authToken and portalId.\n\n<p>Parameters\n<p><p>authToken &mdash; <p>User's authToken.\n"],["new","Projects::Api::FoldersAPI","Projects/Api/FoldersAPI.html#method-c-new","(authToken,portalId)","<p>Construct a new FoldersAPI using User's authToken and portalId.\n\n<p>Parameters\n<p><p>authToken &mdash; <p>User's authToken. ...\n"],["new","Projects::Api::ForumsAPI","Projects/Api/ForumsAPI.html#method-c-new","(authToken,portalId)","<p>Construct a new FoumsAPI using User's authToken and portalId.\n\n<p>Parameters\n<p><p>authToken &mdash; <p>User's authToken.\n"],["new","Projects::Api::MilestonesAPI","Projects/Api/MilestonesAPI.html#method-c-new","(authToken,portalId)","<p>Construct a new MilestonesAPI using User's authToken and portalId.\n\n<p>Parameters\n<p><p>authToken &mdash; <p>User's authToken ...\n"],["new","Projects::Api::PortalAPI","Projects/Api/PortalAPI.html#method-c-new","(authToken)","<p>Construct a new PortalsAPI using User's authTken.\n\n<p>Parameters\n<p><p>authToken &mdash; <p>User's authToken.\n"],["new","Projects::Api::ProjectsAPI","Projects/Api/ProjectsAPI.html#method-c-new","(authToken,portalId)","<p>Construct a new ProjectsAPI using User's authToken and portalId.\n\n<p>Parameters\n<p><p>authToken &mdash; <p>User's authToken ...\n"],["new","Projects::Api::TasklistsAPI","Projects/Api/TasklistsAPI.html#method-c-new","(authToken,portalId)","<p>Construct a new TasklistsAPI using User's authToken and portalId.\n\n<p>Parameters\n<p><p>authToken &mdash; <p>User's authToken ...\n"],["new","Projects::Api::TasksAPI","Projects/Api/TasksAPI.html#method-c-new","(authToken,portalId)","<p>Construct a new TasksAPI using User's authToken and portalId.\n\n<p>Parameters\n<p><p>authToken &mdash; User's authToken.\n"],["new","Projects::Api::TimesheetsAPI","Projects/Api/TimesheetsAPI.html#method-c-new","(authToken,portalId)","<p>Construct a new TimesheetsAPI using User's authToken and portalId.\n\n<p>Parameters\n<p><p>authToken &mdash; <p>User's authToken ...\n"],["new","Projects::Api::UsersAPI","Projects/Api/UsersAPI.html#method-c-new","(authToken,portalId)","<p>Construct a new UsersAPI using User's authToken and portalId.\n\n<p>Parameters\n<p><p>authToken &mdash; <p>User's authToken.\n"],["new","Projects::Pexception::ProjectsException","Projects/Pexception/ProjectsException.html#method-c-new","(code, message)","<p>Construct a new ProjectsException by passing an error code and error\nmessage.\n\n<p>Parameters\n<p><p>code &mdash; <p>Error code. ...\n"],["new","Projects::Service::ZohoProjects","Projects/Service/ZohoProjects.html#method-c-new","(authToken,portalId)","<p>Initialize ZhoProjects using user's authToken and portalId.\n\n<p>Parameters\n<p><p>authToken &mdash; <p>User's authToken.\n"],["post","Projects::Util::ZohoHTTPClient","Projects/Util/ZohoHTTPClient.html#method-c-post","(url, queryMap, paramMap, fileBody=nil)","<p>Make a POST request and create a resource for the given URL and a MultiPart\nform data.\n<p>Calls getResult ...\n\n"],["setAMPM","Projects::Model::Event","Projects/Model/Event.html#method-i-setAMPM","(ampm)","<p>Set AM or PM for the event.\n\n<p>Parameters\n<p><p>ampm &mdash; <p>Event scheduled on AM or PM.\n"],["setActivityBy","Projects::Model::Activity","Projects/Model/Activity.html#method-i-setActivityBy","(activityBy)","<p>Set who posted the activity.\n\n<p>Parameters\n<p><p>activityBy &mdash; <p>User who posted the activity.\n"],["setActivityFor","Projects::Model::Activity","Projects/Model/Activity.html#method-i-setActivityFor","(activityFor)","<p>Set the activity for which topic.\n\n<p>Parameters\n<p><p>activityFor &mdash; <p>Topic fo the Activity.\n"],["setActivityURL","Projects::Model::Project","Projects/Model/Project.html#method-i-setActivityURL","(activityUrl)","<p>Set the activity URL.\n\n<p>Parameters\n<p><p>activityUrl &mdash; <p>URL for the activity.\n"],["setAddedBy","Projects::Model::Comment","Projects/Model/Comment.html#method-i-setAddedBy","(addedBy)","<p>Set the id for the comment added person.\n\n<p>Parameters\n<p><p>addedBy &mdash; <p>ID of the person who added the comment.\n"],["setAddedPerson","Projects::Model::Comment","Projects/Model/Comment.html#method-i-setAddedPerson","(addedPerson)","<p>Set the comment added person.\n\n<p>Parameters\n<p><p>addedPerson &mdash; <p>Person who added comment.\n"],["setAssigneeId","Projects::Model::Bug","Projects/Model/Bug.html#method-i-setAssigneeId","(assigneeId)","<p>Set the assignee id for the bug.\n\n<p>Parameters\n<p><p>assigneeId &mdash; <p>ID of the assignee.\n"],["setAssigneeName","Projects::Model::Bug","Projects/Model/Bug.html#method-i-setAssigneeName","(assigneeName)","<p>Set the assignee name.\n\n<p>Parameters\n<p><p>assigneeName &mdash; <p>Name of the assignee.\n"],["setAssociateDocumentIds","Projects::Model::Task","Projects/Model/Task.html#method-i-setAssociateDocumentIds","(associateDocumentIds)","<p>Set the associated document IDs of the task.\n\n<p>Parameters\n<p><p>associateDocumentIds &mdash; <p>Document IDs of the task. ...\n"],["setAssociateForumIds","Projects::Model::Task","Projects/Model/Task.html#method-i-setAssociateForumIds","(associateForumIds)","<p>Set the associated forum IDs.\n\n<p>Parameters\n<p><p>associateForumIds &mdash; <p>Forum IDs of the task.\n"],["setBillStatus","Projects::Model::Log","Projects/Model/Log.html#method-i-setBillStatus","(billStatus)","<p>Set the bill status for the log.\n\n<p>Parameters\n<p><p>billStatus &mdash; <p>Bill status for the log.\n"],["setBugId","Projects::Model::Buglog","Projects/Model/Buglog.html#method-i-setBugId","(bugId)","<p>Set the bug id.\n\n<p>Parameters\n<p><p>bugId &mdash; <p>ID of the bug.\n"],["setBugURL","Projects::Model::Project","Projects/Model/Project.html#method-i-setBugURL","(bugUrl)","<p>Set the bug URL.\n\n<p>Parameters\n<p><p>bugUrl &mdash; <p>URL for the bug.\n"],["setBuglogs","Projects::Model::Timelog","Projects/Model/Timelog.html#method-i-setBuglogs","(buglogs)","<p>Set the bug logs.\n\n<p>Parameters\n<p><p>buglogs &mdash; <p>List of Buglog object.\n"],["setCategoryId","Projects::Model::Forum","Projects/Model/Forum.html#method-i-setCategoryId","(categoryId)","<p>Set the category id of the project.\n\n<p>Parameters\n<p><p>categoryId &mdash; <p>ID of the project category.\n"],["setClassificationId","Projects::Model::Bug","Projects/Model/Bug.html#method-i-setClassificationId","(classificationId)","<p>Set the classification id.\n\n<p>Parameters\n<p><p>classificationId &mdash; <p>ID of the classification.\n"],["setClassificationType","Projects::Model::Bug","Projects/Model/Bug.html#method-i-setClassificationType","(classificationType)","<p>Set the classification type.\n\n<p>Parameters\n<p><p>classificationType &mdash; <p>Type of the classification.\n"],["setClosed","Projects::Model::Bug","Projects/Model/Bug.html#method-i-setClosed","(closed)","<p>Set the bug is closed or not.\n\n<p>Parameters\n<p><p>closed &mdash; <p>Bug is closed or not.\n"],["setClosedBugCount","Projects::Model::Project","Projects/Model/Project.html#method-i-setClosedBugCount","(closedBugCount)","<p>Set the closed bug count.\n\n<p>Parameters\n<p><p>closedBugCount &mdash; <p>Closed bug count for the project.\n"],["setClosedMilestoneCount","Projects::Model::Project","Projects/Model/Project.html#method-i-setClosedMilestoneCount","(closedMilestoneCount)","<p>Set the closed milestone count.\n\n<p>Parameters\n<p><p>closedMilestoneCount &mdash; <p>Closed milestone count for the project. ...\n"],["setClosedTaskCount","Projects::Model::Project","Projects/Model/Project.html#method-i-setClosedTaskCount","(closedTaskCount)","<p>Set the closed task count.\n\n<p>Parameters\n<p><p>closedTaskCount &mdash; <p>Closed task count for the project.\n"],["setCode","Projects::Model::Portal","Projects/Model/Portal.html#method-i-setCode","(code)","<p>Set the language code.\n\n<p>Parameters\n<p><p>code &mdash; <p>Code of the language.\n"],["setComments","Projects::Model::Task","Projects/Model/Task.html#method-i-setComments","(comments)","<p>Set the comments of the task.\n\n<p>Parameters\n<p><p>comments &mdash; <p>List of Comment object.\n"],["setCompanyName","Projects::Model::Portal","Projects/Model/Portal.html#method-i-setCompanyName","(companyName)","<p>Set the company name.\n\n<p>Parameters\n<p><p>companyName &mdash; <p>Name of the company.\n"],["setCompleted","Projects::Model::Task","Projects/Model/Task.html#method-i-setCompleted","(completed)","<p>Set whether the task is completed or not.\n\n<p>Parameters\n<p><p>completed &mdash; <p>Is task is completed or not.\n"],["setCompleted","Projects::Model::Tasklist","Projects/Model/Tasklist.html#method-i-setCompleted","(completed)","<p>Set whether the task list is completed or not.\n\n<p>Parameters\n<p><p>completed &mdash; <p>Whether the task list is completed ...\n"],["setContent","Projects::Model::Comment","Projects/Model/Comment.html#method-i-setContent","(content)","<p>Set the comment content.\n\n<p>Parameters\n<p><p>content &mdash; <p>Content for the comment.\n"],["setContent","Projects::Model::Forum","Projects/Model/Forum.html#method-i-setContent","(content)","<p>Set the content of the forum.\n\n<p>Parameters\n<p><p>content &mdash; <p>Content of the forum.\n"],["setContent","Projects::Model::Status","Projects/Model/Status.html#method-i-setContent","(content)","<p>Set the status content.\n\n<p>Parameters\n<p><p>content &mdash; <p>Content for the status.\n"],["setContenttype","Projects::Model::Document","Projects/Model/Document.html#method-i-setContenttype","(contenttype)","<p>Set the content type.\n\n<p>Parameters\n<p><p>contenttype &mdash; <p>Content type of the file.\n"],["setCountry","Projects::Model::Portal","Projects/Model/Portal.html#method-i-setCountry","(country)","<p>Set the country.\n\n<p>Parameters\n<p><p>country &mdash; <p>Country for portal.\n"],["setCreatedBy","Projects::Model::Task","Projects/Model/Task.html#method-i-setCreatedBy","(createdBy)","<p>Set the id of the person who created the task.\n\n<p>Parameters\n<p><p>createdBy &mdash; <p>Id of the user who created the task. ...\n"],["setCreatedDate","Projects::Model::Project","Projects/Model/Project.html#method-i-setCreatedDate","(createdDate)","<p>Set the date when the project is being created.\n\n<p>Parameters\n<p><p>createdDate &mdash; <p>Created date for the project.\n"],["setCreatedDateFormat","Projects::Model::Project","Projects/Model/Project.html#method-i-setCreatedDateFormat","(createdDateFormat)","<p>Set the created date format for the project.\n\n<p>Parameters\n<p><p>createdDate &mdash; <p>Project created date format.\n"],["setCreatedDateLong","Projects::Model::Project","Projects/Model/Project.html#method-i-setCreatedDateLong","(createdDateLong)","<p>Set the project created date.\n\n<p>Parameters\n<p><p>createdDateLong &mdash; <p>Project created date.\n"],["setCreatedPerson","Projects::Model::Task","Projects/Model/Task.html#method-i-setCreatedPerson","(createdPerson)","<p>Set the task created person name.\n\n<p>Parameters\n<p><p>createdPerson &mdash; <p>Name of the person who created the task.\n"],["setCreatedTime","Projects::Model::Bug","Projects/Model/Bug.html#method-i-setCreatedTime","(createdTime)","<p>Set the created time.\n\n<p>Parameters\n<p><p>createdTime &mdash; <p>Created time for the bug.\n"],["setCreatedTime","Projects::Model::Comment","Projects/Model/Comment.html#method-i-setCreatedTime","(createdTime)","<p>Set the created time.\n\n<p>Parameters\n<p><p>createdTime &mdash; <p>Created time for the comment.\n"],["setCreatedTime","Projects::Model::Tasklist","Projects/Model/Tasklist.html#method-i-setCreatedTime","(createdTime)","<p>Set the task list created time.\n\n<p>Parameters\n<p><p>createdTime &mdash; <p>Task list created time.\n"],["setCreatedTimeFormat","Projects::Model::Bug","Projects/Model/Bug.html#method-i-setCreatedTimeFormat","(createdTimeFormat)","<p>Set the created time format.\n\n<p>Parameters\n<p><p>createdTime &mdash; <p>Created time format for the bug.\n"],["setCreatedTimeFormat","Projects::Model::Comment","Projects/Model/Comment.html#method-i-setCreatedTimeFormat","(createdTimeFormat)","<p>Set the created time format.\n\n<p>Parameters\n<p><p>createdTime &mdash; <p>Created time format for the comment.\n"],["setCreatedTimeFormat","Projects::Model::Tasklist","Projects/Model/Tasklist.html#method-i-setCreatedTimeFormat","(createdTimeFormat)","<p>Set the task list created time format.\n\n<p>Parameters\n<p><p>createdTime &mdash; <p>Task list created time format.\n"],["setCreatedTimeLong","Projects::Model::Bug","Projects/Model/Bug.html#method-i-setCreatedTimeLong","(createdTimeLong)","<p>Set the created time long.\n\n<p>Parameters\n<p><p>createdTimeLong &mdash; <p>Created time for the bug.\n"],["setCreatedTimeLong","Projects::Model::Comment","Projects/Model/Comment.html#method-i-setCreatedTimeLong","(createdTimeLong)","<p>Set the created time long.\n\n<p>Parameters\n<p><p>createdTimeLong &mdash; <p>Created time for the comment.\n"],["setCreatedTimeLong","Projects::Model::Tasklist","Projects/Model/Tasklist.html#method-i-setCreatedTimeLong","(createdTimeLong)","<p>Set the task list created time long.\n\n<p>Parameters\n<p><p>createdTimeLong &mdash; <p>Task list created time long.\n"],["setDate","Projects::Model::Log","Projects/Model/Log.html#method-i-setDate","(date)","<p>Set the log date.\n\n<p>Parameters\n<p><p>date &mdash; <p>Date for the log.\n"],["setDateFormat","Projects::Model::Portal","Projects/Model/Portal.html#method-i-setDateFormat","(dateFormat)","<p>Set the date format.\n\n<p>Parameters\n<p><p>dateFormat &mdash; <p>Date format for the portal.\n"],["setDateLong","Projects::Model::Timelog","Projects/Model/Timelog.html#method-i-setDateLong","(dateLong)","<p>Set the date for the time log.\n\n<p>Parameters\n<p><p>dateLong &mdash; <p>Date for the time log.\n"],["setDefault","Projects::Model::Portal","Projects/Model/Portal.html#method-i-setDefault","(isDefault)","<p>Set whether portal is default portal or not.\n\n<p>Parameters\n<p><p>isDefault &mdash; <p>Is this postal default portal or not. ...\n"],["setDescription","Projects::Model::Bug","Projects/Model/Bug.html#method-i-setDescription","(description)","<p>Set the bug description.\n\n<p>Parameters\n<p><p>description &mdash; <p>Description for the bug.\n"],["setDescription","Projects::Model::Document","Projects/Model/Document.html#method-i-setDescription","(description)","<p>Set the description of the document.\n\n<p>Parameters\n<p><p>description &mdash; <p>Description of the document.\n"],["setDescription","Projects::Model::Project","Projects/Model/Project.html#method-i-setDescription","(description)","<p>Set the project description.\n\n<p>Parameters\n<p><p>description &mdash; <p>Description of the project.\n"],["setDescription","Projects::Model::Version","Projects/Model/Version.html#method-i-setDescription","(description)","<p>Set the version description.\n\n<p>Parameters\n<p><p>description &mdash; <p>Description for the version.\n"],["setDisplayFormat","Projects::Model::Timelog","Projects/Model/Timelog.html#method-i-setDisplayFormat","(displayFormat)","<p>Set the display format for the date.\n\n<p>Parameters\n<p><p>displayFormat &mdash; <p>Display format for the date.\n"],["setDisplayTime","Projects::Model::Activity","Projects/Model/Activity.html#method-i-setDisplayTime","(displayTime)","<p>Set the display time for the activity.\n\n<p>Parameters\n<p><p>displayTime &mdash; <p>Display time for the activity.\n"],["setDocumentURL","Projects::Model::Project","Projects/Model/Project.html#method-i-setDocumentURL","(documentUrl)","<p>Set the document URL.\n\n<p>Parameters\n<p><p>documentUrl &mdash; <p>URL for the document.\n"],["setDueDate","Projects::Model::Bug","Projects/Model/Bug.html#method-i-setDueDate","(dueDate)","<p>Set the due date.\n\n<p>Parameters\n<p><p>dueDate &mdash; <p>Due date for the bug.\n"],["setDueDateFormat","Projects::Model::Bug","Projects/Model/Bug.html#method-i-setDueDateFormat","(dueDateFormat)","<p>Set the due date format.\n\n<p>Parameters\n<p><p>dueDate &mdash; <p>Due date format for the bug.\n"],["setDueDateLong","Projects::Model::Bug","Projects/Model/Bug.html#method-i-setDueDateLong","(dueDateLong)","<p>Set the due date long.\n\n<p>Parameters\n<p><p>dueDateLong &mdash; <p>Due date for the bug.\n"],["setDuration","Projects::Model::Task","Projects/Model/Task.html#method-i-setDuration","(duration)","<p>Set the task duration.\n\n<p>Parameters\n<p><p>duration &mdash; <p>Duration of the task.\n"],["setDurationHours","Projects::Model::Event","Projects/Model/Event.html#method-i-setDurationHours","(durationHour)","<p>Set the duration hour.\n\n<p>Parameters\n<p><p>durationHour &mdash; <p>Duration of the event in hours.\n"],["setDurationMinutes","Projects::Model::Event","Projects/Model/Event.html#method-i-setDurationMinutes","(durationMinutes)","<p>Set the duration minutes for the event.\n\n<p>Parameters\n<p><p>durationMinutes &mdash; <p>Duration of the event in minutes.\n"],["setEmail","Projects::Model::User","Projects/Model/User.html#method-i-setEmail","(email)","<p>Set the user email.\n\n<p>Parameters\n<p><p>email &mdash; <p>Email for the user.\n"],["setEndDate","Projects::Model::Milestone","Projects/Model/Milestone.html#method-i-setEndDate","(endDate)","<p>Set the end date of the milestone.\n\n<p>Parameters\n<p><p>endDate &mdash; <p>End date of the milestone.\n"],["setEndDate","Projects::Model::Task","Projects/Model/Task.html#method-i-setEndDate","(endDate)","<p>Set the task end date.\n\n<p>Parameters\n<p><p>endDate &mdash; <p>End date of the task.\n"],["setEndDateFormat","Projects::Model::Milestone","Projects/Model/Milestone.html#method-i-setEndDateFormat","(endDateFormat)","<p>Set the end date format.\n\n<p>Parameters\n<p><p>endDateLong &mdash; <p>End date format of the milestone.\n"],["setEndDateFormat","Projects::Model::Task","Projects/Model/Task.html#method-i-setEndDateFormat","(endDateFormat)","<p>Set the task end date format.\n\n<p>Parameters\n<p><p>endDate &mdash; <p>End date format of the task.\n"],["setEndDateLong","Projects::Model::Milestone","Projects/Model/Milestone.html#method-i-setEndDateLong","(endDateLong)","<p>Set the end date long.\n\n<p>Parameters\n<p><p>endDateLong &mdash; <p>End date long of the milestone.\n"],["setEndDateLong","Projects::Model::Task","Projects/Model/Task.html#method-i-setEndDateLong","(endDateLong)","<p>Set the end date long.\n\n<p>Parameters\n<p><p>endDateLong &mdash; <p>End date for the task.\n"],["setEventURL","Projects::Model::Project","Projects/Model/Project.html#method-i-setEventURL","(eventUrl)","<p>Set the event URL.\n\n<p>Parameters\n<p><p>eventUrl &mdash; <p>URL for the event.\n"],["setFileSize","Projects::Model::Version","Projects/Model/Version.html#method-i-setFileSize","(fileSize)","<p>Set the file size.\n\n<p>Parameters\n<p><p>fileSize &mdash; <p>Size of the file.\n"],["setFilename","Projects::Model::Document","Projects/Model/Document.html#method-i-setFilename","(filename)","<p>Set the file name.\n\n<p>Parameters\n<p><p>filename &mdash; <p>Name of the file.\n"],["setFlag","Projects::Model::Bug","Projects/Model/Bug.html#method-i-setFlag","(flag)","<p>Set the flag for the bug.\n\n<p>Parameters\n<p><p>flag &mdash; <p>Flag for the bug.\n"],["setFlag","Projects::Model::Milestone","Projects/Model/Milestone.html#method-i-setFlag","(flag)","<p>Set the flag for the milestone.\n\n<p>Parameters\n<p><p>flag &mdash; <p>Flag for the milestone.\n"],["setFlag","Projects::Model::Tasklist","Projects/Model/Tasklist.html#method-i-setFlag","(flag)","<p>Set the flag for the task list.\n\n<p>Parameters\n<p><p>flag &mdash; <p>Flag for the task list.\n"],["setFolder","Projects::Model::Document","Projects/Model/Document.html#method-i-setFolder","(folder)","<p>Set the folder.\n\n<p>Parameters\n<p><p>folder &mdash; <p>Folder object.\n"],["setFolderId","Projects::Model::Document","Projects/Model/Document.html#method-i-setFolderId","(folderId)","<p>Set the folder id.\n\n<p>Parameters\n<p><p>folderId &mdash; <p>ID of the folder.\n"],["setFolderURL","Projects::Model::Project","Projects/Model/Project.html#method-i-setFolderURL","(folderUrl)","<p>Set the folder URL.\n\n<p>Parameters\n<p><p>folderUrl &mdash; <p>URL for the folder.\n"],["setForumURL","Projects::Model::Project","Projects/Model/Project.html#method-i-setForumURL","(forumUrl)","<p>Set the forum URL.\n\n<p>Parameters\n<p><p>forumUrl &mdash; <p>URL for the forum.\n"],["setGenerallogs","Projects::Model::Timelog","Projects/Model/Timelog.html#method-i-setGenerallogs","(generallogs)","<p>Set the general logs.\n\n<p>Parameters\n<p><p>generallogs &mdash; <p>List of Generallog object.\n"],["setGmtTimeZone","Projects::Model::Portal","Projects/Model/Portal.html#method-i-setGmtTimeZone","(gmtTimeZone)","<p>Set the gmt time zone.\n\n<p>Parameters\n<p><p>gmtTimeZone &mdash; <p>Gmt time zone for the portal.\n"],["setGrandtotal","Projects::Model::TimelogList","Projects/Model/TimelogList.html#method-i-setGrandtotal","(grandtotal)","<p>Set the grand total of the time log.\n\n<p>Parameters\n<p><p>grandtotal &mdash; <p>Grand total of the time log.\n"],["setHour","Projects::Model::Event","Projects/Model/Event.html#method-i-setHour","(hour)","<p>Set the hour for the event.\n\n<p>Parameters\n<p><p>hour &mdash; <p>Hour for the event.\n"],["setHours","Projects::Model::Log","Projects/Model/Log.html#method-i-setHours","(hours)","<p>Set the hours for the log.\n\n<p>Parameters\n<p><p>hours &mdash; <p>Hours for the log.\n"],["setHoursDisplay","Projects::Model::Log","Projects/Model/Log.html#method-i-setHoursDisplay","(hoursDisplay)","<p>Set the hour display format.\n\n<p>Parameters\n<p><p>hourDisplay &mdash; <p>Hour display format.\n"],["setId","Projects::Model::Activity","Projects/Model/Activity.html#method-i-setId","(id)","<p>Set the id of the activity.\n\n<p>Parameters\n<p><p>id &mdash; <p>ID of the activity.\n"],["setId","Projects::Model::Bug","Projects/Model/Bug.html#method-i-setId","(id)","<p>Set the bug id.\n\n<p>Parameters\n<p><p>id &mdash; <p>ID of the bug.\n"],["setId","Projects::Model::Category","Projects/Model/Category.html#method-i-setId","(id)","<p>Set the category id.\n\n<p>Parameters\n<p><p>id &mdash; <p>ID of the category.\n"],["setId","Projects::Model::Comment","Projects/Model/Comment.html#method-i-setId","(id)","<p>Set the comment id.\n\n<p>Parameters\n<p><p>id &mdash; <p>ID of the comment.\n"],["setId","Projects::Model::Document","Projects/Model/Document.html#method-i-setId","(id)","<p>Set the document id.\n\n<p>Parameters\n<p><p>id &mdash; <p>ID of the document.\n"],["setId","Projects::Model::Event","Projects/Model/Event.html#method-i-setId","(id)","<p>Set the event id.\n\n<p>Parameters\n<p><p>id &mdash; <p>ID of the event.\n"],["setId","Projects::Model::Folder","Projects/Model/Folder.html#method-i-setId","(id)","<p>Set the folder id.\n\n<p>Parameters\n<p><p>id &mdash; <p>ID of the folder.\n"],["setId","Projects::Model::Forum","Projects/Model/Forum.html#method-i-setId","(id)","<p>Set the forum id.\n\n<p>Parameters\n<p><p>id &mdash; <p>ID of the forum.\n"],["setId","Projects::Model::Log","Projects/Model/Log.html#method-i-setId","(id)","<p>Set the log id.\n\n<p>Parameters\n<p><p>id &mdash; <p>ID of the log.\n"],["setId","Projects::Model::Milestone","Projects/Model/Milestone.html#method-i-setId","(id)","<p>Set the milestone id.\n\n<p>Parameters\n<p><p>id &mdash; <p>ID of the milestone.\n"],["setId","Projects::Model::Owner","Projects/Model/Owner.html#method-i-setId","(id)","<p>Set the owner id.\n\n<p>Parameters\n<p><p>id &mdash; <p>ID of the owner.\n"],["setId","Projects::Model::Portal","Projects/Model/Portal.html#method-i-setId","(id)","<p>Set the portal id.\n\n<p>Parameters\n<p><p>id &mdash; <p>ID of the portal.\n"],["setId","Projects::Model::Project","Projects/Model/Project.html#method-i-setId","(id)","<p>Get the project id.\n\n<p>Returns\n<p>Project id.\n"],["setId","Projects::Model::Status","Projects/Model/Status.html#method-i-setId","(id)","<p>Set the status id.\n\n<p>Parameters\n<p><p>id &mdash; <p>ID of the status.\n"],["setId","Projects::Model::Task","Projects/Model/Task.html#method-i-setId","(id)","<p>Set the task id.\n\n<p>Parameters\n<p><p>id &mdash; <p>ID of the task.\n"],["setId","Projects::Model::Tasklist","Projects/Model/Tasklist.html#method-i-setId","(id)","<p>Set the task list id.\n\n<p>Parameters\n<p><p>id &mdash; <p>ID of the task list.\n"],["setId","Projects::Model::User","Projects/Model/User.html#method-i-setId","(id)","<p>Set the user id.\n\n<p>Parameters\n<p><p>id &mdash; <p>ID of the user.\n"],["setId","Projects::Model::Version","Projects/Model/Version.html#method-i-setId","(id)","<p>Set the version id.\n\n<p>Parameters\n<p><p>id &mdash; <p>ID of the version.\n"],["setIsAnnouncementPost","Projects::Model::Forum","Projects/Model/Forum.html#method-i-setIsAnnouncementPost","(isAnnouncementPost)","<p>Set is announcement post or not.\n\n<p>Parameters\n<p><p>isAnnouncementPost &mdash; <p>is the post announcement or not.\n"],["setIsDicussion","Projects::Model::Folder","Projects/Model/Folder.html#method-i-setIsDicussion","(isDiscussion)","<p>Set the folder is in discussion or not.\n\n<p>Parameters\n<p><p>isDiscussion &mdash; <p>Is the folder is in discussion or not. ...\n"],["setIsOpen","Projects::Model::Event","Projects/Model/Event.html#method-i-setIsOpen","(isOpen)","<p>Set the event is open or not.\n\n<p>Parameters\n<p><p>isOpen &mdash; <p>The event is open or not.\n"],["setIsStickyPost","Projects::Model::Forum","Projects/Model/Forum.html#method-i-setIsStickyPost","(isStickyPost)","<p>Set the forum is a sticky post or not.\n\n<p>Parameters\n<p><p>isStickyPost &mdash; <p>Is the forum in a sticky post or not.\n"],["setKey","Projects::Model::Bug","Projects/Model/Bug.html#method-i-setKey","(key)","<p>Set the key for the bug.\n\n<p>Parameters\n<p><p>key &mdash; <p>Key for the bug.\n"],["setLanguage","Projects::Model::Portal","Projects/Model/Portal.html#method-i-setLanguage","(language)","<p>Set the language.\n\n<p>Parameters\n<p><p>language &mdash; <p>Language for the portal.\n"],["setLocation","Projects::Model::Event","Projects/Model/Event.html#method-i-setLocation","(location)","<p>Set the event location.\n\n<p>Parameters\n<p><p>location &mdash; <p>Location of the event.\n"],["setLogDate","Projects::Model::Log","Projects/Model/Log.html#method-i-setLogDate","(logDate)","<p>Set the log date.\n\n<p>Parameters\n<p><p>logDate &mdash; <p>Date of the log.\n"],["setLogDateFormat","Projects::Model::Log","Projects/Model/Log.html#method-i-setLogDateFormat","(logDateFormat)","<p>Set the log date format.\n\n<p>Parameters\n<p><p>logDate &mdash; <p>Date format of the log.\n"],["setLogDateLong","Projects::Model::Log","Projects/Model/Log.html#method-i-setLogDateLong","(logDateLong)","<p>Set the log date.\n\n<p>Parameters\n<p><p>logDateLong &mdash; <p>Date for the log.\n"],["setMilestone","Projects::Model::Tasklist","Projects/Model/Tasklist.html#method-i-setMilestone","(milestone)","<p>Set the milestone for the task list.\n\n<p>Parameters\n<p><p>milestone &mdash; <p>Milestone object.\n"],["setMilestoneId","Projects::Model::Bug","Projects/Model/Bug.html#method-i-setMilestoneId","(milestoneId)","<p>Set the milestone id.\n\n<p>Parameters\n<p><p>milestoneId &mdash; <p>ID of the milestone.\n"],["setMilestoneURL","Projects::Model::Project","Projects/Model/Project.html#method-i-setMilestoneURL","(milestoneUrl)","<p>Set the milestone URL.\n\n<p>Parameters\n<p><p>milestoneUrl &mdash; <p>URL for the milestone.\n"],["setMinutes","Projects::Model::Event","Projects/Model/Event.html#method-i-setMinutes","(minutes)","<p>Set the minutes for the event.\n\n<p>Parameters\n<p><p>minutes &mdash; <p>Minutes for the event.\n"],["setMinutes","Projects::Model::Log","Projects/Model/Log.html#method-i-setMinutes","(minutes)","<p>Set the minutes for the log.\n\n<p>Parameters\n<p><p>minutes &mdash; <p>Minutes for the log.\n"],["setModuleId","Projects::Model::Bug","Projects/Model/Bug.html#method-i-setModuleId","(moduleId)","<p>Set the module id.\n\n<p>Parameters\n<p><p>moduleId &mdash; <p>ID of the module.\n"],["setModuleName","Projects::Model::Bug","Projects/Model/Bug.html#method-i-setModuleName","(moduleName)","<p>Set the module name.\n\n<p>Parameters\n<p><p>moduleName &mdash; <p>Name of the module.\n"],["setName","Projects::Model::Activity","Projects/Model/Activity.html#method-i-setName","(name)","<p>Set the name of the activity.\n\n<p>Parameters\n<p><p>name &mdash; <p>Name of the activity.\n"],["setName","Projects::Model::Category","Projects/Model/Category.html#method-i-setName","(name)","<p>Set the category name.\n\n<p>Parameters\n<p><p>name &mdash; <p>Name of the category.\n"],["setName","Projects::Model::Folder","Projects/Model/Folder.html#method-i-setName","(name)","<p>Set the folder name.\n\n<p>Parameters\n<p><p>name &mdash; <p>Name of the folder.\n"],["setName","Projects::Model::Forum","Projects/Model/Forum.html#method-i-setName","(name)","<p>Set the forum name.\n\n<p>Parameters\n<p><p>name &mdash; <p>Name of the forum.\n"],["setName","Projects::Model::Generallog","Projects/Model/Generallog.html#method-i-setName","(name)","<p>Set the name fo the general log.\n\n<p>Parameters\n<p><p>name &mdash; <p>Name of the general log.\n"],["setName","Projects::Model::Milestone","Projects/Model/Milestone.html#method-i-setName","(name)","<p>Set the milestone name.\n\n<p>Parameters\n<p><p>name &mdash; <p>Name of the milestone.\n"],["setName","Projects::Model::Owner","Projects/Model/Owner.html#method-i-setName","(name)","<p>Set the owner name.\n\n<p>Parameters\n<p><p>name &mdash; <p>Name of the owner.\n"],["setName","Projects::Model::Portal","Projects/Model/Portal.html#method-i-setName","(name)","<p>Set the portal name.\n\n<p>Parameters\n<p><p>name &mdash; <p>Name of the portal.\n"],["setName","Projects::Model::Project","Projects/Model/Project.html#method-i-setName","(name)","<p>Set the project name.\n\n<p>Parameters\n<p><p>name &mdash; <p>Name of the project.\n"],["setName","Projects::Model::Task","Projects/Model/Task.html#method-i-setName","(name)","<p>Set the task name.\n\n<p>Parameters\n<p><p>name &mdash; <p>Name of the task.\n"],["setName","Projects::Model::Tasklist","Projects/Model/Tasklist.html#method-i-setName","(name)","<p>Set the task list name.\n\n<p>Parameters\n<p><p>name &mdash; <p>Name of the task list.\n"],["setName","Projects::Model::User","Projects/Model/User.html#method-i-setName","(name)","<p>Set the user name.\n\n<p>Parameters\n<p><p>name &mdash; <p>Name of the user.\n"],["setNotes","Projects::Model::Log","Projects/Model/Log.html#method-i-setNotes","(notes)","<p>Set the notes for the log.\n\n<p>Parameters\n<p><p>notes &mdash; <p>Notes for the log.\n"],["setNotify","Projects::Model::Document","Projects/Model/Document.html#method-i-setNotify","(notify)","<p>Set the notify for the document.\n\n<p>Parameters\n<p><p>notify &mdash; <p>Notify for the document.\n"],["setNotify","Projects::Model::Forum","Projects/Model/Forum.html#method-i-setNotify","(notify)","<p>Set the notify in the forum.\n\n<p>Parameters\n<p><p>notify &mdash; <p>Notify in the forum.\n"],["setOccurred","Projects::Model::Event","Projects/Model/Event.html#method-i-setOccurred","(occurred)","<p>Set no of times occurred for the reminder.\n\n<p>Parameters\n<p><p>occurred &mdash; <p>Number of times reminder has occurred.  ...\n"],["setOccurrences","Projects::Model::Event","Projects/Model/Event.html#method-i-setOccurrences","(occurrences)","<p>Set the occurrences for the reminder.\n\n<p>Parameters\n<p><p>occurrences &mdash; <p>Numnber of occurrences for the reminder. ...\n"],["setOpenBugCount","Projects::Model::Project","Projects/Model/Project.html#method-i-setOpenBugCount","(openBugCount)","<p>Set the open bug count.\n\n<p>Parameters\n<p><p>openBugCount &mdash; <p>Open bug count for the project.\n"],["setOpenMilestoneCount","Projects::Model::Project","Projects/Model/Project.html#method-i-setOpenMilestoneCount","(openMilestoneCount)","<p>Set the open milestone count.\n\n<p>Parameters\n<p><p>openMilestoneCount &mdash; <p>Open milestone count for the project.\n"],["setOpenTaskCount","Projects::Model::Project","Projects/Model/Project.html#method-i-setOpenTaskCount","(openTaskCount)","<p>Set the open task count.\n\n<p>Parameters\n<p><p>openTaskCount &mdash; <p>Open task count for the project.\n"],["setOwnerId","Projects::Model::Log","Projects/Model/Log.html#method-i-setOwnerId","(ownerId)","<p>Set the owner id.\n\n<p>Parameters\n<p><p>ownerId &mdash; <p>ID of the owner.\n"],["setOwnerId","Projects::Model::Milestone","Projects/Model/Milestone.html#method-i-setOwnerId","(ownerId)","<p>Set the owner id.\n\n<p>Parameters\n<p><p>ownerId &mdash; <p>ID of the owner.\n"],["setOwnerId","Projects::Model::Project","Projects/Model/Project.html#method-i-setOwnerId","(ownerId)","<p>Set the owner id.\n\n<p>Parameters\n<p><p>ownerId &mdash; <p>ID of the owner.\n"],["setOwnerName","Projects::Model::Log","Projects/Model/Log.html#method-i-setOwnerName","(ownerName)","<p>Set the owner name.\n\n<p>Parameters\n<p><p>ownerName &mdash; <p>Name of the owner.\n"],["setOwnerName","Projects::Model::Milestone","Projects/Model/Milestone.html#method-i-setOwnerName","(ownerName)","<p>Set the owner name.\n\n<p>Parameters\n<p><p>ownerName &mdash; <p>Name of the owner.\n"],["setOwnerName","Projects::Model::Project","Projects/Model/Project.html#method-i-setOwnerName","(ownerName)","<p>Set the owner name.\n\n<p>Parameters\n<p><p>ownerName &mdash; <p>Name of the owner.\n"],["setOwners","Projects::Model::Task","Projects/Model/Task.html#method-i-setOwners","(owners)","<p>Set the owners of the task.\n\n<p>Parameters\n<p><p>owners &mdash; <p>List of Owner object.\n"],["setParticipantId","Projects::Model::Participant","Projects/Model/Participant.html#method-i-setParticipantId","(participantId)","<p>Set the participant id.\n\n<p>Parameters\n<p><p>participantId &mdash; <p>ID of the participant.\n"],["setParticipantPerson","Projects::Model::Participant","Projects/Model/Participant.html#method-i-setParticipantPerson","(participantPerson)","<p>Set the participant name.\n\n<p>Parameters\n<p><p>participantPerson &mdash; <p>Name of the participant.\n"],["setParticipants","Projects::Model::Event","Projects/Model/Event.html#method-i-setParticipants","(participants)","<p>Set the participants.\n\n<p>Parameters\n<p><p>participants &mdash; <p>List of Participant object.\n"],["setPercentComplete","Projects::Model::Task","Projects/Model/Task.html#method-i-setPercentComplete","(percentComplete)","<p>Set the task completed percent.\n\n<p>Parameters\n<p><p>percentComplete &mdash; <p>Task completed percent.\n"],["setPostDate","Projects::Model::Comment","Projects/Model/Comment.html#method-i-setPostDate","(postDate)","<p>Set the comment posted date.\n\n<p>Parameters\n<p><p>postDate &mdash; <p>Date at which comment is posted.\n"],["setPostDate","Projects::Model::Forum","Projects/Model/Forum.html#method-i-setPostDate","(postDate)","<p>Set the post date of the forum.\n\n<p>Parameters\n<p><p>postDate &mdash; <p>Date of the post in the forum.\n"],["setPostDateFormat","Projects::Model::Comment","Projects/Model/Comment.html#method-i-setPostDateFormat","(postDateFormat)","<p>Set the comment posted date format.\n\n<p>Parameters\n<p><p>postDate &mdash; <p>Date format of the posted comment.\n"],["setPostDateFormat","Projects::Model::Forum","Projects/Model/Forum.html#method-i-setPostDateFormat","(postDateFormat)","<p>Set the date format of the post in the forum.\n\n<p>Parameters\n<p><p>postDate &mdash; <p>Date format of the post in the forum. ...\n"],["setPostDateLong","Projects::Model::Comment","Projects/Model/Comment.html#method-i-setPostDateLong","(postDateLong)","<p>Set the comment posted date long.\n\n<p>Parameters\n<p><p>postDateLong &mdash; <p>Was was the comment posted(date).\n"],["setPostDateLong","Projects::Model::Forum","Projects/Model/Forum.html#method-i-setPostDateLong","(postDateLong)","<p>Set the date of the post the forum.\n\n<p>Parameters\n<p><p>postDateLong &mdash; <p>Date of the post in the forum.\n"],["setPostedBy","Projects::Model::Comment","Projects/Model/Comment.html#method-i-setPostedBy","(postedBy)","<p>Set the comment posted person id.\n\n<p>Parameters\n<p><p>postedBy &mdash; <p>Id of the person who posted the comment.\n"],["setPostedBy","Projects::Model::Forum","Projects/Model/Forum.html#method-i-setPostedBy","(postedBy)","<p>Set the id of the posted User.\n\n<p>Parameters\n<p><p>postedBy &mdash; <p>Id of the User who posted the post.\n"],["setPostedBy","Projects::Model::Status","Projects/Model/Status.html#method-i-setPostedBy","(postedBy)","<p>Set the status posted person id.\n\n<p>Parameters\n<p><p>postedBy &mdash; <p>ID of the person who posted the status.\n"],["setPostedPerson","Projects::Model::Comment","Projects/Model/Comment.html#method-i-setPostedPerson","(postedPerson)","<p>Set the comment posted person.\n\n<p>Parameters\n<p><p>postedPerson &mdash; <p>Person who posted the comment.\n"],["setPostedPerson","Projects::Model::Forum","Projects/Model/Forum.html#method-i-setPostedPerson","(postedPerson)","<p>Set the posted User name.\n\n<p>Parameters\n<p><p>postedPerson &mdash; <p>Posted User name.\n"],["setPostedPerson","Projects::Model::Status","Projects/Model/Status.html#method-i-setPostedPerson","(postedPerson)","<p>Set the status posted person name.\n\n<p>Parameters\n<p><p>postedPerson &mdash; <p>Name of the person who posted the status.\n"],["setPostedTime","Projects::Model::Status","Projects/Model/Status.html#method-i-setPostedTime","(postedTime)","<p>Set the status posted time.\n\n<p>Parameters\n<p><p>postedTime &mdash; <p>Status posted time.\n"],["setPostedTimeFormat","Projects::Model::Status","Projects/Model/Status.html#method-i-setPostedTimeFormat","(postedTimeFormat)","<p>Set the status posted time format.\n\n<p>Parameters\n<p><p>postedTimeLong &mdash; <p>Status posted time format.\n"],["setPostedTimeLong","Projects::Model::Status","Projects/Model/Status.html#method-i-setPostedTimeLong","(postedTimeLong)","<p>Set the status posted time long.\n\n<p>Parameters\n<p><p>postedTimeLong &mdash; <p>Status posted time long.\n"],["setPriority","Projects::Model::Task","Projects/Model/Task.html#method-i-setPriority","(priority)","<p>Set the priority of the task.\n\n<p>Parameters\n<p><p>priority &mdash; <p>Priority of the task.\n"],["setProjectId","Projects::Model::Bug","Projects/Model/Bug.html#method-i-setProjectId","(projectId)","<p>Set the project id.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["setProjectId","Projects::Model::Log","Projects/Model/Log.html#method-i-setProjectId","(projectId)","<p>Set the project id.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["setProjectName","Projects::Model::Log","Projects/Model/Log.html#method-i-setProjectName","(projectName)","<p>Set the project name.\n\n<p>Parameters\n<p><p>projectName &mdash; <p>Name of the project.\n"],["setProjectURL","Projects::Model::Portal","Projects/Model/Portal.html#method-i-setProjectURL","(projectUrl)","<p>Set the project URL.\n\n<p>Parameters\n<p><p>projectUrl &mdash; <p>URL for the project.\n"],["setReminder","Projects::Model::Event","Projects/Model/Event.html#method-i-setReminder","(reminder)","<p>Set the reminder for the event.\n\n<p>Parameters\n<p><p>reminder &mdash; <p>Reminder for the event.\n"],["setRepeat","Projects::Model::Event","Projects/Model/Event.html#method-i-setRepeat","(repeat)","<p>Set the reminder repeat for the event.\n\n<p>Parameters\n<p><p>repeat &mdash; <p>Repeat reminder for the event.\n"],["setReportedPerson","Projects::Model::Bug","Projects/Model/Bug.html#method-i-setReportedPerson","(reportedPerson)","<p>Set the reported person.\n\n<p>Parameters\n<p><p>reportedPerson &mdash; <p>Person who is reporting the bug.\n"],["setReporterId","Projects::Model::Bug","Projects/Model/Bug.html#method-i-setReporterId","(reporterId)","<p>Set the reporter id.\n\n<p>Parameters\n<p><p>reporterId &mdash; <p>ID of the reporter.\n"],["setReproducibleId","Projects::Model::Bug","Projects/Model/Bug.html#method-i-setReproducibleId","(reproducibleId)","<p>Set the reproducible id.\n\n<p>Parameters\n<p><p>reproducibleId &mdash; <p>Reproducible id of the bug.\n"],["setReproducibleType","Projects::Model::Bug","Projects/Model/Bug.html#method-i-setReproducibleType","(reproducibleType)","<p>Set the reproducible type.\n\n<p>Parameters\n<p><p>reproducibleType &mdash; <p>Reproducible type of the bug.\n"],["setRole","Projects::Model::Portal","Projects/Model/Portal.html#method-i-setRole","(role)","<p>Set the role.\n\n<p>Parameters\n<p><p>role &mdash; <p>Role of the person.\n"],["setRole","Projects::Model::TimelogList","Projects/Model/TimelogList.html#method-i-setRole","(role)","<p>Set the time log role.\n\n<p>Parameters\n<p><p>role &mdash; <p>Role for the time log.\n"],["setRole","Projects::Model::User","Projects/Model/User.html#method-i-setRole","(role)","<p>Set the user role.\n\n<p>Parameters\n<p><p>role &mdash; <p>Role for the user.\n"],["setRolled","Projects::Model::Tasklist","Projects/Model/Tasklist.html#method-i-setRolled","(rolled)","<p>Set whether the task list is rolled or not.\n\n<p>Parameters\n<p><p>rolled &mdash; <p>Whether the task list is rolled or not.\n"],["setScheduledOn","Projects::Model::Event","Projects/Model/Event.html#method-i-setScheduledOn","(scheduledOn)","<p>Set the event scheduled on.\n\n<p>Parameters\n<p><p>scheduledOn &mdash; <p>Scheduled time of the event.\n"],["setScheduledOnLong","Projects::Model::Event","Projects/Model/Event.html#method-i-setScheduledOnLong","(scheduledOnLong)","<p>Set the event scheduled on long.\n\n<p>Parameters\n<p><p>scheduledOnLong &mdash; <p>Event scheduled on long.\n"],["setSequence","Projects::Model::Tasklist","Projects/Model/Tasklist.html#method-i-setSequence","(sequence)","<p>Set the sequence of the task list.\n\n<p>Parameters\n<p><p>sequence &mdash; <p>Sequence of the task list.\n"],["setSeverityId","Projects::Model::Bug","Projects/Model/Bug.html#method-i-setSeverityId","(severityId)","<p>Set the severity id.\n\n<p>Parameters\n<p><p>severityId &mdash; <p>ID of the severity.\n"],["setSeverityType","Projects::Model::Bug","Projects/Model/Bug.html#method-i-setSeverityType","(severityType)","<p>Set the severity type.\n\n<p>Parameters\n<p><p>severityType &mdash; <p>Type of the severity.\n"],["setStartDate","Projects::Model::Milestone","Projects/Model/Milestone.html#method-i-setStartDate","(startDate)","<p>Set the start date of the milestone.\n\n<p>Parameters\n<p><p>startDate &mdash; <p>Start date of the milestone.\n"],["setStartDate","Projects::Model::Task","Projects/Model/Task.html#method-i-setStartDate","(startDate)","<p>Set the task start date.\n\n<p>Parameters\n<p><p>startDate &mdash; <p>Start date of the task.\n"],["setStartDateFormat","Projects::Model::Milestone","Projects/Model/Milestone.html#method-i-setStartDateFormat","(startDateFormat)","<p>Set the start date format of the milestone.\n\n<p>Parameters\n<p><p>startDateLong &mdash; <p>Start date format of the milestone. ...\n"],["setStartDateFormat","Projects::Model::Task","Projects/Model/Task.html#method-i-setStartDateFormat","(startDateFormat)","<p>Set the task start date format.\n\n<p>Parameters\n<p><p>startDate &mdash; <p>Start date format of the task.\n"],["setStartDateLong","Projects::Model::Milestone","Projects/Model/Milestone.html#method-i-setStartDateLong","(startDateLong)","<p>Set the start date long of the milestone.\n\n<p>Parameters\n<p><p>startDateLong &mdash; <p>Start date long of the milestone.\n"],["setStartDateLong","Projects::Model::Task","Projects/Model/Task.html#method-i-setStartDateLong","(startDateLong)","<p>Set the start date long.\n\n<p>Parameters\n<p><p>startDateLong &mdash; <p>Start date long for the task.\n"],["setState","Projects::Model::Activity","Projects/Model/Activity.html#method-i-setState","(state)","<p>Set the state of the activity.\n\n<p>Parameters\n<p><p>state &mdash; <p>State of the activity.\n"],["setStatus","Projects::Model::Milestone","Projects/Model/Milestone.html#method-i-setStatus","(status)","<p>Set the status of the milestone.\n\n<p>Parameters\n<p><p>status &mdash; <p>Status of the milestone.\n"],["setStatus","Projects::Model::Project","Projects/Model/Project.html#method-i-setStatus","(status)","<p>Set the status of the project.\n\n<p>Parameters\n<p><p>status &mdash; <p>Status of the project.\n"],["setStatus","Projects::Model::Tasklist","Projects/Model/Tasklist.html#method-i-setStatus","(status)","<p>Set the status of the task list.\n\n<p>Parameters\n<p><p>status &mdash; <p>Status of the task list.\n"],["setStatusId","Projects::Model::Bug","Projects/Model/Bug.html#method-i-setStatusId","(statusId)","<p>Set the status id.\n\n<p>Parameters\n<p><p>statusId &mdash; <p>ID of the status.\n"],["setStatusType","Projects::Model::Bug","Projects/Model/Bug.html#method-i-setStatusType","(statusType)","<p>Set the status type.\n\n<p>Parameters\n<p><p>statusType &mdash; <p>Type of the status.\n"],["setStatusURL","Projects::Model::Milestone","Projects/Model/Milestone.html#method-i-setStatusURL","(statusUrl)","<p>Set the status URL.\n\n<p>Parameters\n<p><p>statusUrl &mdash; <p>Status URL for the milestone.\n"],["setStatusURL","Projects::Model::Project","Projects/Model/Project.html#method-i-setStatusURL","(statusUrl)","<p>Set the status URL.\n\n<p>Parameters\n<p><p>statusUrl &mdash; <p>URL for the status.\n"],["setSubtasks","Projects::Model::Task","Projects/Model/Task.html#method-i-setSubtasks","(tasks)","<p>Set the subtasks of the task.\n\n<p>Parameters\n<p><p>tasks &mdash; <p>List of Task object.\n"],["setTags","Projects::Model::Document","Projects/Model/Document.html#method-i-setTags","(tags)","<p>Set the tags for the document.\n\n<p>Parameters\n<p><p>tags &mdash; <p>Tags for the document.\n"],["setTaskId","Projects::Model::Tasklog","Projects/Model/Tasklog.html#method-i-setTaskId","(taskId)","<p>Set the task id.\n\n<p>Parameters\n<p><p>taskId &mdash; <p>ID of the task.\n"],["setTaskName","Projects::Model::Tasklog","Projects/Model/Tasklog.html#method-i-setTaskName","(taskName)","<p>Set the task name.\n\n<p>Parameters\n<p><p>taskName &mdash; <p>Name of the task.\n"],["setTaskURL","Projects::Model::Project","Projects/Model/Project.html#method-i-setTaskURL","(taskUrl)","<p>Set the task URL.\n\n<p>Parameters\n<p><p>taskUrl &mdash; <p>URL for the task.\n"],["setTaskURL","Projects::Model::Tasklist","Projects/Model/Tasklist.html#method-i-setTaskURL","(taskUrl)","<p>Set the task URL.\n\n<p>Parameters\n<p><p>taskUrl &mdash; <p>URL for the task.\n"],["setTasklist","Projects::Model::Task","Projects/Model/Task.html#method-i-setTasklist","(tasklist)","<p>Set the tasklist of the task.\n\n<p>Parameters\n<p><p>tasklist &mdash; <p>Tasklist object.\n"],["setTasklistURL","Projects::Model::Project","Projects/Model/Project.html#method-i-setTasklistURL","(tasklistUrl)","<p>Set the task list URL.\n\n<p>Parameters\n<p><p>tasklistUrl &mdash; <p>URL for the task list.\n"],["setTasklogs","Projects::Model::Timelog","Projects/Model/Timelog.html#method-i-setTasklogs","(tasklogs)","<p>Set the task logs.\n\n<p>Parameters\n<p><p>tasklogs &mdash; <p>List of Tasklog object.\n"],["setTime","Projects::Model::Activity","Projects/Model/Activity.html#method-i-setTime","(time)","<p>Set the time for the activity done.\n\n<p>Parameters\n<p><p>time &mdash; <p>Time for the activity done.\n"],["setTimeLong","Projects::Model::Activity","Projects/Model/Activity.html#method-i-setTimeLong","(timeLong)","<p>Set the time long.\n\n<p>Parameters\n<p><p>timeLong &mdash; <p>Time for the activity.\n"],["setTimeZone","Projects::Model::Portal","Projects/Model/Portal.html#method-i-setTimeZone","(timeZone)","<p>Set the time zone.\n\n<p>Parameters\n<p><p>timeZone &mdash; <p>Time zone for the portal.\n"],["setTimesheetURL","Projects::Model::Bug","Projects/Model/Bug.html#method-i-setTimesheetURL","(timesheetUrl)","<p>Set the time sheet URL.\n\n<p>Parameters\n<p><p>timesheetUrl &mdash; <p>URL for the time sheet.\n"],["setTimesheetURL","Projects::Model::Project","Projects/Model/Project.html#method-i-setTimesheetURL","(timesheetUrl)","<p>Set the time sheet URL.\n\n<p>Parameters\n<p><p>timesheetUrl &mdash; <p>URL for the time sheet.\n"],["setTimesheetURL","Projects::Model::Task","Projects/Model/Task.html#method-i-setTimesheetURL","(timesheetUrl)","<p>Set the time sheet URL.\n\n<p>Parameters\n<p><p>timesheetUrl &mdash; <p>URL for the time sheet.\n"],["setTitle","Projects::Model::Bug","Projects/Model/Bug.html#method-i-setTitle","(title)","<p>Set the bug title.\n\n<p>Parameters\n<p><p>title &mdash; <p>Title for the bug.\n"],["setTitle","Projects::Model::Buglog","Projects/Model/Buglog.html#method-i-setTitle","(title)","<p>Set the title of the bug.\n\n<p>Parameters\n<p><p>title &mdash; <p>Title of the bug.\n"],["setTitle","Projects::Model::Event","Projects/Model/Event.html#method-i-setTitle","(title)","<p>Set the event title.\n\n<p>Parameters\n<p><p>title &mdash; <p>Title of the event.\n"],["setTotalHours","Projects::Model::Timelog","Projects/Model/Timelog.html#method-i-setTotalHours","(totalHours)","<p>Set the total hours for the time log.\n\n<p>Parameters\n<p><p>totalHours &mdash; <p>Total hours for the time log.\n"],["setTotalMinutes","Projects::Model::Log","Projects/Model/Log.html#method-i-setTotalMinutes","(totalMinutes)","<p>Set the total time in minutes for the log.\n\n<p>Parameters\n<p><p>totalMinutes &mdash; <p>Total time in minutes for the log.\n"],["setURL","Projects::Model::Bug","Projects/Model/Bug.html#method-i-setURL","(url)","<p>Set the bug URL.\n\n<p>Parameters\n<p><p>url &mdash; <p>URL for the bug.\n"],["setURL","Projects::Model::Document","Projects/Model/Document.html#method-i-setURL","(url)","<p>Set the document URL.\n\n<p>Parameters\n<p><p>url &mdash; <p>URL for the document.\n"],["setURL","Projects::Model::Folder","Projects/Model/Folder.html#method-i-setURL","(url)","<p>Set the folder URL.\n\n<p>Parameters\n<p><p>url &mdash; <p>URL for the folder.\n"],["setURL","Projects::Model::Forum","Projects/Model/Forum.html#method-i-setURL","(url)","<p>Set the forum URL.\n\n<p>Parameters\n<p><p>url &mdash; <p>URL for the forum.\n"],["setURL","Projects::Model::Log","Projects/Model/Log.html#method-i-setURL","(url)","<p>Set the URL for the log.\n\n<p>Parameters\n<p><p>url &mdash; <p>URL for the log.\n"],["setURL","Projects::Model::Milestone","Projects/Model/Milestone.html#method-i-setURL","(url)","<p>Set the milestone URL.\n\n<p>Parameters\n<p><p>url &mdash; <p>URL for the milestone.\n"],["setURL","Projects::Model::Project","Projects/Model/Project.html#method-i-setURL","(url)","<p>Set the project URL.\n\n<p>Parameters\n<p><p>url &mdash; <p>URL for the project.\n"],["setURL","Projects::Model::Task","Projects/Model/Task.html#method-i-setURL","(url)","<p>Set the task URL.\n\n<p>Parameters\n<p><p>url &mdash; <p>URL for the task.\n"],["setURL","Projects::Model::Tasklist","Projects/Model/Tasklist.html#method-i-setURL","(url)","<p>Set the task list URL.\n\n<p>Parameters\n<p><p>url &mdash; <p>URL for the task list.\n"],["setUpdatedBy","Projects::Model::Comment","Projects/Model/Comment.html#method-i-setUpdatedBy","(updatedBy)","<p>Set the comment updated person id.\n\n<p>Parameters\n<p><p>updatedBy &mdash; <p>ID of the person who updated the comment.\n"],["setUploaddoc","Projects::Model::Document","Projects/Model/Document.html#method-i-setUploaddoc","(uploaddoc)","<p>Set the upload document file.\n\n<p>Parameters\n<p><p>uploaddoc &mdash; <p>ArrayList of the documents being uploaded.\n"],["setUploadedBy","Projects::Model::Version","Projects/Model/Version.html#method-i-setUploadedBy","(uploadedBy)","<p>Set the id of the person who has uploaded.\n\n<p>Parameters\n<p><p>uploadedBy &mdash; <p>Id of the person who has uploaded.\n"],["setUploadedDate","Projects::Model::Version","Projects/Model/Version.html#method-i-setUploadedDate","(uploadedDate)","<p>Set the uploaded date.\n\n<p>Parameters\n<p><p>uploadedDate &mdash; <p>Document uploaded date.\n"],["setUploadedDateFormat","Projects::Model::Version","Projects/Model/Version.html#method-i-setUploadedDateFormat","(uploadedDateFormat)","<p>Set the uploaded date format.\n\n<p>Parameters\n<p><p>uploadedDate &mdash; <p>Document uploaded date format.\n"],["setUploadedDateLong","Projects::Model::Version","Projects/Model/Version.html#method-i-setUploadedDateLong","(uploadedDateLong)","<p>Set the uploaded date long.\n\n<p>Parameters\n<p><p>uploadedDateLong &mdash; <p>Document uploaded date long.\n"],["setUploadedOn","Projects::Model::Version","Projects/Model/Version.html#method-i-setUploadedOn","(uploadedOn)","<p>Set when was the document uploaded on.\n\n<p>Parameters\n<p><p>uploadedOn &mdash; <p>When was the document uploaded on.\n"],["setUploadfile","Projects::Model::Forum","Projects/Model/Forum.html#method-i-setUploadfile","(uploadfile)","<p>Set the upload file list.\n\n<p>Parameters\n<p><p>uploadfile &mdash; <p>ArrayList of Uploading file in the forum.\n"],["setUserURL","Projects::Model::Project","Projects/Model/Project.html#method-i-setUserURL","(userUrl)","<p>Set the user URL.\n\n<p>Parameters\n<p><p>userUrl &mdash; <p>URL for the user.\n"],["setVersion","Projects::Model::Version","Projects/Model/Version.html#method-i-setVersion","(version)","<p>Set the version.\n\n<p>Parameters\n<p><p>version &mdash; <p>Version of the document.\n"],["setVersions","Projects::Model::Document","Projects/Model/Document.html#method-i-setVersions","(versions)","<p>Set the document version.\n\n<p>Parameters\n<p><p>versions &mdash; <p>Version for the document.\n"],["setWebsiteURL","Projects::Model::Portal","Projects/Model/Portal.html#method-i-setWebsiteURL","(websiteUrl)","<p>Set the WEBsite URL.\n\n<p>Parameters\n<p><p>websiteUrl &mdash; <p>URL for the Website.\n"],["throwsException","Projects::Util::ZohoHTTPClient","Projects/Util/ZohoHTTPClient.html#method-c-throwsException","(message)","<p>Raises ProjectsException when this method is called\n\n<p>Parameters\n<p><p>message &mdash; <p>Response message of the request ...\n"],["toParamMAP","Projects::Model::Bug","Projects/Model/Bug.html#method-i-toParamMAP","()","<p>Convert the Bug object into HashMap.\n\n<p>Returns\n<p>HashMap object.\n"],["toParamMAP","Projects::Model::Category","Projects/Model/Category.html#method-i-toParamMAP","()","<p>Convert the Category object into HashMap object.\n\n<p>Returns\n<p>HashMap object.\n"],["toParamMAP","Projects::Model::Comment","Projects/Model/Comment.html#method-i-toParamMAP","()","<p>Convert the Comment object into HashMap.\n\n<p>Returns\n<p>HashMap object.\n"],["toParamMAP","Projects::Model::Document","Projects/Model/Document.html#method-i-toParamMAP","()","<p>Convert the Document object into HashMap.\n\n<p>Returns\n<p>HashMap object.\n"],["toParamMAP","Projects::Model::Event","Projects/Model/Event.html#method-i-toParamMAP","()","<p>Convert the Event object into HashMap.\n\n<p>Returns\n<p>HashMap object.\n"],["toParamMAP","Projects::Model::Folder","Projects/Model/Folder.html#method-i-toParamMAP","()","<p>Convert the Folder object into HashMap.\n\n<p>Returns\n<p>HashMap object.\n"],["toParamMAP","Projects::Model::Forum","Projects/Model/Forum.html#method-i-toParamMAP","()","<p>Convert the Forum object into HashMap.\n\n<p>Returns\n<p>HashMap object.\n"],["toParamMAP","Projects::Model::Log","Projects/Model/Log.html#method-i-toParamMAP","()","<p>Convert the Log object into HashMap.\n\n<p>Returns\n<p>HashMap object.\n"],["toParamMAP","Projects::Model::Milestone","Projects/Model/Milestone.html#method-i-toParamMAP","()","<p>Convert the Milestone object into HashMap.\n\n<p>Returns\n<p>HashMap object.\n"],["toParamMAP","Projects::Model::Project","Projects/Model/Project.html#method-i-toParamMAP","()","<p>Convert the Project object into HashMap.\n\n<p>Returns\n<p>HashMap object.\n"],["toParamMAP","Projects::Model::Status","Projects/Model/Status.html#method-i-toParamMAP","()","<p>Convert the Status object into HashMap.\n\n<p>Returns\n<p>HashMap object.\n"],["toParamMAP","Projects::Model::Task","Projects/Model/Task.html#method-i-toParamMAP","()","<p>Convert the Task object into HashMap.\n\n<p>Returns\n<p>HashMap object.\n"],["toParamMAP","Projects::Model::Tasklist","Projects/Model/Tasklist.html#method-i-toParamMAP","()","<p>Convert the Tasklist object into HashMap.\n\n<p>Returns\n<p>HashMap object.\n"],["update","Projects::Api::BugsAPI","Projects/Api/BugsAPI.html#method-i-update","(projectId, bug)","<p>Update the details of a bug.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["update","Projects::Api::DocumentsAPI","Projects/Api/DocumentsAPI.html#method-i-update","(projectId, document)","<p>Update the details of a document.\n\n<p>Attributes\n<p><p>projectId &mdash; <p>ID of the project.\n"],["update","Projects::Api::EventsAPI","Projects/Api/EventsAPI.html#method-i-update","(projectId, event)","<p>Update the details of an event.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["update","Projects::Api::ForumsAPI","Projects/Api/ForumsAPI.html#method-i-update","(projectId, forum)","<p>update the details of a forum.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["update","Projects::Api::MilestonesAPI","Projects/Api/MilestonesAPI.html#method-i-update","(projectId,milestone)","<p>Update the details of a milestone.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["update","Projects::Api::TasklistsAPI","Projects/Api/TasklistsAPI.html#method-i-update","(projectId,tasklist)","<p>Update the details of a tasklist.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["update","Projects::Api::TasksAPI","Projects/Api/TasksAPI.html#method-i-update","(projectId, task)","<p>Update the details of a task.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["updateBuglog","Projects::Api::TimesheetsAPI","Projects/Api/TimesheetsAPI.html#method-i-updateBuglog","(projectId, buglog)","<p>Update the details of a bug log.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["updateFolder","Projects::Api::FoldersAPI","Projects/Api/FoldersAPI.html#method-i-updateFolder","(projectId, folder)","<p>Update the details of a folder.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["updateGenerallog","Projects::Api::TimesheetsAPI","Projects/Api/TimesheetsAPI.html#method-i-updateGenerallog","(projectId, generallog)","<p>Update the details of a general log.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["updateProject","Projects::Api::ProjectsAPI","Projects/Api/ProjectsAPI.html#method-i-updateProject","(project)","<p>Update the details of a project.\n\n<p>Parameters\n<p><p>project &mdash; <p>Project object.\n"],["updateStatus","Projects::Api::MilestonesAPI","Projects/Api/MilestonesAPI.html#method-i-updateStatus","(projectId,milestoneId,status)","<p>Update the status of a milestone.\n\n<p>Parameters\n<p><p>projectId &mdash; <p>ID of the project.\n"],["updateTasklog","Projects::Api::TimesheetsAPI","Projects/Api/TimesheetsAPI.html#method-i-updateTasklog","(projectId, tasklog)","<p>Update the details of a task log.\n\n<p>Parameters\n<p>projectId ID of the project.\n"]]}}